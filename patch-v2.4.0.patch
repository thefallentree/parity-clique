diff --git a/Cargo.lock b/Cargo.lock
index 4b29e6525..8d4d61267 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -2524,7 +2524,7 @@ dependencies = [
  "parity-rpc 1.12.0",
  "parity-runtime 0.1.0",
  "parity-updater 1.12.0",
- "parity-version 2.4.0",
+ "parity-version 2.4.0-clique",
  "parity-whisper 0.1.0",
  "parking_lot 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "pretty_assertions 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -2675,7 +2675,7 @@ dependencies = [
  "parity-crypto 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "parity-runtime 0.1.0",
  "parity-updater 1.12.0",
- "parity-version 2.4.0",
+ "parity-version 2.4.0-clique",
  "parking_lot 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "pretty_assertions 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
  "rand 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -2773,7 +2773,7 @@ dependencies = [
  "parity-bytes 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "parity-hash-fetch 1.12.0",
  "parity-path 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "parity-version 2.4.0",
+ "parity-version 2.4.0-clique",
  "parking_lot 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "rand 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)",
  "semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -2783,7 +2783,7 @@ dependencies = [
 
 [[package]]
 name = "parity-version"
-version = "2.4.0"
+version = "2.4.0-clique"
 dependencies = [
  "parity-bytes 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "rlp 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
diff --git a/ethcore/Cargo.toml b/ethcore/Cargo.toml
index 0e3cea0fc..bd13d6467 100644
--- a/ethcore/Cargo.toml
+++ b/ethcore/Cargo.toml
@@ -39,7 +39,7 @@ keccak-hasher = { path = "../util/keccak-hasher" }
 kvdb = "0.1"
 kvdb-memorydb = "0.1"
 kvdb-rocksdb = { version = "0.1.3", optional = true }
-lazy_static = "1.0"
+lazy_static = "1.2.0"
 len-caching-lock = { path = "../util/len-caching-lock" }
 log = "0.4"
 lru-cache = "0.1"
diff --git a/ethcore/res/ethereum/goerli.json b/ethcore/res/ethereum/goerli.json
new file mode 100644
index 000000000..8e8e3a67c
--- /dev/null
+++ b/ethcore/res/ethereum/goerli.json
@@ -0,0 +1,911 @@
+{
+	"name":"GÃ¶rli Testnet",
+	"dataDir":"goerli",
+	"engine":{
+		"clique":{
+			"params":{
+				"period":15,
+				"epoch":30000
+			}
+		}
+	},
+	"params":{
+		"accountStartNonce":"0x0",
+		"chainID":"0x5",
+		"eip140Transition":"0x0",
+		"eip145Transition":"0x0",
+		"eip150Transition":"0x0",
+		"eip155Transition":"0x0",
+		"eip160Transition":"0x0",
+		"eip161abcTransition":"0x0",
+		"eip161dTransition":"0x0",
+		"eip211Transition":"0x0",
+		"eip214Transition":"0x0",
+		"eip658Transition":"0x0",
+		"eip1014Transition":"0x0",
+		"eip1052Transition":"0x0",
+		"eip1283Transition":"0x0",
+		"eip1283DisableTransition":"0x0",
+		"gasLimitBoundDivisor":"0x400",
+		"maxCodeSize":"0x6000",
+		"maxCodeSizeTransition":"0x0",
+		"maximumExtraDataSize":"0xffff",
+		"minGasLimit":"0x1388",
+		"networkID":"0x5"
+	},
+	"genesis":{
+		"author":"0x0000000000000000000000000000000000000000",
+		"difficulty":"0x1",
+		"extraData":"0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
+		"gasLimit":"0xa00000",
+		"parentHash":"0x0000000000000000000000000000000000000000000000000000000000000000",
+		"seal":{
+			"ethereum":{
+				"nonce":"0x0000000000000000",
+				"mixHash":"0x0000000000000000000000000000000000000000000000000000000000000000"
+			}
+		},
+		"timestamp":"0x5c51a607"
+	},
+	"nodes":[
+		"enode://011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a@51.141.78.53:30303",
+		"enode://176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b@13.93.54.137:30303"
+	],
+	"accounts":{
+		"0x0000000000000000000000000000000000000000":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000001":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"ecrecover",
+				"pricing":{
+					"linear":{
+						"base":3000,
+						"word":0
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000002":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"sha256",
+				"pricing":{
+					"linear":{
+						"base":60,
+						"word":12
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000003":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"ripemd160",
+				"pricing":{
+					"linear":{
+						"base":600,
+						"word":120
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000004":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"identity",
+				"pricing":{
+					"linear":{
+						"base":15,
+						"word":3
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000005":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"modexp",
+				"activate_at":"0x0",
+				"pricing":{
+					"modexp":{
+						"divisor":20
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000006":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"alt_bn128_add",
+				"activate_at":"0x0",
+				"pricing":{
+					"linear":{
+						"base":500,
+						"word":0
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000007":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"alt_bn128_mul",
+				"activate_at":"0x0",
+				"pricing":{
+					"linear":{
+						"base":40000,
+						"word":0
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000008":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"alt_bn128_pairing",
+				"activate_at":"0x0",
+				"pricing":{
+					"alt_bn128_pairing":{
+						"base":100000,
+						"pair":80000
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000009":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000010":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000011":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000012":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000013":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000014":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000015":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000016":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000017":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000018":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000019":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000020":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000021":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000022":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000023":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000024":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000025":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000026":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000027":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000028":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000029":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000030":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000031":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000032":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000033":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000034":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000035":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000036":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000037":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000038":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000039":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000040":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000041":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000042":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000043":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000044":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000045":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000046":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000047":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000048":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000049":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000050":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000051":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000052":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000053":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000054":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000055":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000056":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000057":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000058":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000059":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000060":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000061":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000062":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000063":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000064":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000065":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000066":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000067":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000068":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000069":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000070":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000071":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000072":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000073":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000074":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000075":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000076":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000077":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000078":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000079":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000080":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000081":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000082":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000083":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000084":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000085":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000086":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000087":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000088":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000089":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000090":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000091":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000092":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000093":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000094":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000095":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000096":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000097":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000098":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000099":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009f":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000aa":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ab":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ac":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ad":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ae":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000af":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ba":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000be":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bf":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ca":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ce":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cf":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000da":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000db":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000dc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000dd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000de":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000df":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ea":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000eb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ec":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ed":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ee":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ef":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fa":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fe":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ff":{
+			"balance":"0x1"
+		},
+		"0x4c2ae482593505f0163cdefc073e81c63cda4107": {
+			"balance": "0x152d02c7e14af6800000"
+		},
+		"0xa8e8f14732658e4b51e8711931053a8a69baf2b1": {
+			"balance": "0x152d02c7e14af6800000"
+		},
+		"0xd9a5179f091d85051d3c982785efd1455cec8699": {
+			"balance": "0x84595161401484a000000"
+		},
+		"0xe0a2bd4258d2768837baa26a28fe71dc079f84c7": {
+			"balance": "0x4a47e3c12448f4ad000000"
+		}
+	}
+}
diff --git a/ethcore/res/ethereum/kotti.json b/ethcore/res/ethereum/kotti.json
new file mode 100644
index 000000000..4d83451a0
--- /dev/null
+++ b/ethcore/res/ethereum/kotti.json
@@ -0,0 +1,855 @@
+{
+	"name":"Kotti Testnet",
+	"dataDir":"kotti",
+	"engine":{
+		"clique":{
+			"params":{
+				"period":15,
+				"epoch":30000
+			}
+		}
+	},
+	"params":{
+		"accountStartNonce":"0x0",
+		"chainID":"0x6",
+		"eip150Transition":"0x0",
+		"eip155Transition":"0x0",
+		"eip160Transition":"0x0",
+		"eip161abcTransition":"0x7fffffffffffffff",
+		"eip161dTransition":"0x7fffffffffffffff",
+		"gasLimitBoundDivisor":"0x400",
+		"maximumExtraDataSize":"0xffff",
+		"minGasLimit":"0x1388",
+		"networkID":"0x6"
+	},
+	"genesis":{
+		"author":"0x0000000000000000000000000000000000000000",
+		"difficulty":"0x1",
+		"extraData":"0x000000000000000000000000000000000000000000000000000000000000000025b7955e43adf9c2a01a9475908702cce67f302a6aaf8cba3c9255a2b863415d4db7bae4f4bbca020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
+		"gasLimit":"0xa00000",
+		"parentHash":"0x0000000000000000000000000000000000000000000000000000000000000000",
+		"seal":{
+			"ethereum":{
+				"nonce":"0x0000000000000000",
+				"mixHash":"0x0000000000000000000000000000000000000000000000000000000000000000"
+			}
+		},
+		"timestamp":"0x5c2d2287"
+	},
+	"nodes":[
+		"enode://06333009fc9ef3c9e174768e495722a7f98fe7afd4660542e983005f85e556028410fd03278944f44cfe5437b1750b5e6bd1738f700fe7da3626d52010d2954c@51.141.15.254:30303",
+		"enode://ae8658da8d255d1992c3ec6e62e11d6e1c5899aa1566504bc1ff96a0c9c8bd44838372be643342553817f5cc7d78f1c83a8093dee13d77b3b0a583c050c81940@18.232.185.151:30303"
+	],
+	"accounts":{
+		"0x0000000000000000000000000000000000000000":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000001":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"ecrecover",
+				"pricing":{
+					"linear":{
+						"base":3000,
+						"word":0
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000002":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"sha256",
+				"pricing":{
+					"linear":{
+						"base":60,
+						"word":12
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000003":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"ripemd160",
+				"pricing":{
+					"linear":{
+						"base":600,
+						"word":120
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000004":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"identity",
+				"pricing":{
+					"linear":{
+						"base":15,
+						"word":3
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000005":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000006":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000007":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000008":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000009":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000010":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000011":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000012":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000013":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000014":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000015":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000016":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000017":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000018":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000019":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000020":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000021":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000022":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000023":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000024":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000025":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000026":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000027":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000028":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000029":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000030":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000031":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000032":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000033":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000034":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000035":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000036":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000037":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000038":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000039":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000040":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000041":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000042":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000043":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000044":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000045":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000046":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000047":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000048":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000049":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000050":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000051":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000052":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000053":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000054":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000055":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000056":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000057":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000058":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000059":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000060":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000061":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000062":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000063":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000064":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000065":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000066":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000067":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000068":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000069":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000070":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000071":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000072":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000073":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000074":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000075":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000076":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000077":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000078":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000079":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000080":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000081":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000082":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000083":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000084":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000085":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000086":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000087":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000088":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000089":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000090":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000091":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000092":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000093":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000094":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000095":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000096":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000097":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000098":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000099":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009f":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000aa":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ab":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ac":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ad":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ae":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000af":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ba":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000be":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bf":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ca":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ce":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cf":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000da":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000db":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000dc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000dd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000de":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000df":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ea":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000eb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ec":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ed":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ee":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ef":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fa":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fe":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ff":{
+			"balance":"0x1"
+		},
+		"0x25b7955e43adf9c2a01a9475908702cce67f302a":{
+			"balance":"0x84595161401484a000000"
+		},
+		"0x6aaf8cba3c9255a2b863415d4db7bae4f4bbca02":{
+			"balance":"0x4a723dc6b40b8a9a000000"
+		}
+	}
+}
diff --git a/ethcore/res/ethereum/rinkeby.json b/ethcore/res/ethereum/rinkeby.json
new file mode 100644
index 000000000..20534785f
--- /dev/null
+++ b/ethcore/res/ethereum/rinkeby.json
@@ -0,0 +1,902 @@
+{
+	"name":"Rinkeby",
+	"dataDir":"rinkeby",
+	"engine":{
+		"clique":{
+			"params":{
+				"period":15,
+				"epoch":30000
+			}
+		}
+	},
+	"params":{
+		"accountStartNonce":"0x0",
+		"chainID":"0x4",
+		"eip140Transition":"0xfcc25",
+		"eip145Transition":"0x37db77",
+		"eip150Transition":"0x2",
+		"eip155Transition":"0x3",
+		"eip160Transition":"0x0",
+		"eip161abcTransition":"0x0",
+		"eip161dTransition":"0x0",
+		"eip211Transition":"0xfcc25",
+		"eip214Transition":"0xfcc25",
+		"eip658Transition":"0xfcc25",
+		"eip1014Transition":"0x37db77",
+		"eip1052Transition":"0x37db77",
+		"eip1283Transition":"0x37db77",
+		"gasLimitBoundDivisor":"0x400",
+		"maxCodeSize":"0x6000",
+		"maxCodeSizeTransition":"0x0",
+		"maximumExtraDataSize":"0xffff",
+		"minGasLimit":"0x1388",
+		"networkID":"0x4"
+	},
+	"genesis":{
+		"author":"0x0000000000000000000000000000000000000000",
+		"difficulty":"0x1",
+		"extraData":"0x52657370656374206d7920617574686f7269746168207e452e436172746d616e42eb768f2244c8811c63729a21a3569731535f067ffc57839b00206d1ad20c69a1981b489f772031b279182d99e65703f0076e4812653aab85fca0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
+		"gasLimit":"0x47b760",
+		"parentHash":"0x0000000000000000000000000000000000000000000000000000000000000000",
+		"seal":{
+			"ethereum":{
+				"nonce":"0x0000000000000000",
+				"mixHash":"0x0000000000000000000000000000000000000000000000000000000000000000"
+			}
+		},
+		"timestamp":"0x58ee40ba"
+	},
+	"nodes":[
+		"enode://a24ac7c5484ef4ed0c5eb2d36620ba4e4aa13b8c84684e1b4aab0cebea2ae45cb4d375b77eab56516d34bfbd3c1a833fc51296ff084b770b94fb9028c4d25ccf@52.169.42.101:30303",
+		"enode://343149e4feefa15d882d9fe4ac7d88f885bd05ebb735e547f12e12080a9fa07c8014ca6fd7f373123488102fe5e34111f8509cf0b7de3f5b44339c9f25e87cb8@52.3.158.184:30303",
+		"enode://b6b28890b006743680c52e64e0d16db57f28124885595fa03a562be1d2bf0f3a1da297d56b13da25fb992888fd556d4c1a27b1f39d531bde7de1921c90061cc6@159.89.28.211:30303"
+	],
+	"accounts":{
+		"0x0000000000000000000000000000000000000000":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000001":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"ecrecover",
+				"pricing":{
+					"linear":{
+						"base":3000,
+						"word":0
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000002":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"sha256",
+				"pricing":{
+					"linear":{
+						"base":60,
+						"word":12
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000003":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"ripemd160",
+				"pricing":{
+					"linear":{
+						"base":600,
+						"word":120
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000004":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"identity",
+				"pricing":{
+					"linear":{
+						"base":15,
+						"word":3
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000005":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"modexp",
+				"activate_at":"0xfcc25",
+				"pricing":{
+					"modexp":{
+						"divisor":20
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000006":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"alt_bn128_add",
+				"activate_at":"0xfcc25",
+				"pricing":{
+					"linear":{
+						"base":500,
+						"word":0
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000007":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"alt_bn128_mul",
+				"activate_at":"0xfcc25",
+				"pricing":{
+					"linear":{
+						"base":40000,
+						"word":0
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000008":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"alt_bn128_pairing",
+				"activate_at":"0xfcc25",
+				"pricing":{
+					"alt_bn128_pairing":{
+						"base":100000,
+						"pair":80000
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000009":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000010":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000011":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000012":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000013":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000014":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000015":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000016":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000017":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000018":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000019":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000020":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000021":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000022":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000023":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000024":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000025":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000026":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000027":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000028":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000029":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000030":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000031":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000032":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000033":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000034":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000035":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000036":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000037":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000038":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000039":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000040":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000041":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000042":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000043":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000044":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000045":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000046":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000047":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000048":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000049":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000050":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000051":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000052":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000053":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000054":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000055":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000056":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000057":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000058":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000059":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000060":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000061":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000062":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000063":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000064":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000065":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000066":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000067":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000068":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000069":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000070":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000071":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000072":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000073":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000074":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000075":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000076":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000077":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000078":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000079":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000080":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000081":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000082":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000083":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000084":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000085":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000086":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000087":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000088":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000089":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000090":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000091":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000092":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000093":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000094":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000095":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000096":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000097":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000098":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000099":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009f":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000aa":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ab":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ac":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ad":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ae":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000af":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ba":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000be":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bf":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ca":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ce":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cf":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000da":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000db":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000dc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000dd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000de":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000df":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ea":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000eb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ec":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ed":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ee":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ef":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fa":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fe":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ff":{
+			"balance":"0x1"
+		},
+		"0x31b98d14007bdee637298086988a0bbd31184523":{
+			"balance":"0x200000000000000000000000000000000000000000000000000000000000000"
+		}
+	}
+}
diff --git a/ethcore/src/block.rs b/ethcore/src/block.rs
index e5fcb4516..70154c5b6 100644
--- a/ethcore/src/block.rs
+++ b/ethcore/src/block.rs
@@ -46,7 +46,6 @@ use state::State;
 use trace::Tracing;
 use triehash::ordered_trie_root;
 use unexpected::{Mismatch, OutOfBounds};
-use verification::PreverifiedBlock;
 use vm::{EnvInfo, LastHashes};
 
 use hash::keccak;
@@ -339,22 +338,6 @@ impl<'x> OpenBlock<'x> {
 		Ok(())
 	}
 
-	/// Populate self from a header.
-	fn populate_from(&mut self, header: &Header) {
-		self.block.header.set_difficulty(*header.difficulty());
-		self.block.header.set_gas_limit(*header.gas_limit());
-		self.block.header.set_timestamp(header.timestamp());
-		self.block.header.set_author(*header.author());
-		self.block.header.set_uncles_hash(*header.uncles_hash());
-		self.block.header.set_transactions_root(*header.transactions_root());
-		// TODO: that's horrible. set only for backwards compatibility
-		if header.extra_data().len() > self.engine.maximum_extra_data_size() {
-			warn!("Couldn't set extradata. Ignoring.");
-		} else {
-			self.block.header.set_extra_data(header.extra_data().clone());
-		}
-	}
-
 	/// Turn this into a `ClosedBlock`.
 	pub fn close(self) -> Result<ClosedBlock, Error> {
 		let unclosed_state = self.block.state.clone();
@@ -453,14 +436,20 @@ impl LockedBlock {
 	/// Provide a valid seal in order to turn this into a `SealedBlock`.
 	///
 	/// NOTE: This does not check the validity of `seal` with the engine.
-	pub fn seal(self, engine: &EthEngine, seal: Vec<Bytes>) -> Result<SealedBlock, BlockError> {
+	pub fn seal(self, engine: &EthEngine, seal: Vec<Bytes>) -> Result<SealedBlock, Error> {
 		let expected_seal_fields = engine.seal_fields(self.header());
-		let mut s = self;
 		if seal.len() != expected_seal_fields {
-			return Err(BlockError::InvalidSealArity(
-				Mismatch { expected: expected_seal_fields, found: seal.len() }));
+			return Err(Box::new(BlockError::InvalidSealArity(
+				Mismatch { expected: expected_seal_fields, found: seal.len() })).into());
 		}
+		let mut s = self;
+
 		s.block.header.set_seal(seal);
+
+		if let Some(new_header) = engine.on_seal_block(&s.block)? {
+			s.block.header = new_header;
+		}
+
 		s.block.header.compute_hash();
 		Ok(SealedBlock {
 			block: s.block
@@ -470,6 +459,7 @@ impl LockedBlock {
 	/// Provide a valid seal in order to turn this into a `SealedBlock`.
 	/// This does check the validity of `seal` with the engine.
 	/// Returns the `ClosedBlock` back again if the seal is no good.
+	/// TODO(sunyc): This is currently only used in POW chain call paths, we should really merge it with seal() above.
 	pub fn try_seal(
 		self,
 		engine: &EthEngine,
@@ -515,7 +505,7 @@ impl IsBlock for SealedBlock {
 }
 
 /// Enact the block given by block header, transactions and uncles
-fn enact(
+pub fn enact(
 	header: Header,
 	transactions: Vec<SignedTransaction>,
 	uncles: Vec<Header>,
@@ -528,12 +518,12 @@ fn enact(
 	is_epoch_begin: bool,
 	ancestry: &mut Iterator<Item=ExtendedHeader>,
 ) -> Result<LockedBlock, Error> {
-	{
-		if ::log::max_level() >= ::log::Level::Trace {
-			let s = State::from_existing(db.boxed_clone(), parent.state_root().clone(), engine.account_start_nonce(parent.number() + 1), factories.clone())?;
-			trace!(target: "enact", "num={}, root={}, author={}, author_balance={}\n",
-				header.number(), s.root(), header.author(), s.balance(&header.author())?);
-		}
+	// For trace log
+	let s: Option<State<StateDB>>;
+	if log_enabled!(target: "enact", ::log::Level::Trace) {
+		s = Some(State::from_existing(db.boxed_clone(), parent.state_root().clone(), engine.account_start_nonce(parent.number() + 1), factories.clone())?);
+	} else {
+		s = Default::default();
 	}
 
 	let mut b = OpenBlock::new(
@@ -543,14 +533,29 @@ fn enact(
 		db,
 		parent,
 		last_hashes,
-		Address::new(),
+		// Engine such as Clique will calculate author from extra_data.
+		// this is only important for executing contracts as the 'executive_author'.
+		engine.executive_author(&header),
 		(3141562.into(), 31415620.into()),
-		vec![],
+		header.extra_data().clone(),
 		is_epoch_begin,
 		ancestry,
 	)?;
 
-	b.populate_from(&header);
+	b.block.header.set_difficulty(*header.difficulty());
+	b.block.header.set_gas_limit(*header.gas_limit());
+	b.block.header.set_timestamp(header.timestamp());
+	b.block.header.set_uncles_hash(*header.uncles_hash());
+	b.block.header.set_transactions_root(*header.transactions_root());
+
+	if log_enabled!(target: "enact", ::log::Level::Trace) && s.is_some() {
+		let env = b.env_info();
+		let root = s.as_ref().unwrap().root();
+		let author_balance = s.as_ref().unwrap().balance(&env.author)?;
+		trace!(target: "enact", "num={}, root={}, author={}, author_balance={}\n",
+		       b.block.header.number(), root, env.author, author_balance);
+	}
+
 	b.push_transactions(transactions)?;
 
 	for u in uncles {
@@ -560,34 +565,6 @@ fn enact(
 	b.close_and_lock()
 }
 
-/// Enact the block given by `block_bytes` using `engine` on the database `db` with given `parent` block header
-pub fn enact_verified(
-	block: PreverifiedBlock,
-	engine: &EthEngine,
-	tracing: bool,
-	db: StateDB,
-	parent: &Header,
-	last_hashes: Arc<LastHashes>,
-	factories: Factories,
-	is_epoch_begin: bool,
-	ancestry: &mut Iterator<Item=ExtendedHeader>,
-) -> Result<LockedBlock, Error> {
-
-	enact(
-		block.header,
-		block.transactions,
-		block.uncles,
-		engine,
-		tracing,
-		db,
-		parent,
-		last_hashes,
-		factories,
-		is_epoch_begin,
-		ancestry,
-	)
-}
-
 #[cfg(test)]
 mod tests {
 	use test_helpers::get_temp_state_db;
@@ -615,8 +592,9 @@ mod tests {
 		last_hashes: Arc<LastHashes>,
 		factories: Factories,
 	) -> Result<LockedBlock, Error> {
-		let block = Unverified::from_rlp(block_bytes)?;
-		let header = block.header;
+		let mut block = Unverified::from_rlp(block_bytes)?;
+		let mut header = block.header;
+
 		let transactions: Result<Vec<_>, Error> = block
 			.transactions
 			.into_iter()
@@ -625,36 +603,19 @@ mod tests {
 			.collect();
 		let transactions = transactions?;
 
-		{
-			if ::log::max_level() >= ::log::Level::Trace {
-				let s = State::from_existing(db.boxed_clone(), parent.state_root().clone(), engine.account_start_nonce(parent.number() + 1), factories.clone())?;
-				trace!(target: "enact", "num={}, root={}, author={}, author_balance={}\n",
-					header.number(), s.root(), header.author(), s.balance(&header.author())?);
-			}
-		}
-
-		let mut b = OpenBlock::new(
+		enact(
+			header,
+			transactions,
+			block.uncles,
 			engine,
-			factories,
 			tracing,
 			db,
 			parent,
 			last_hashes,
-			Address::new(),
-			(3141562.into(), 31415620.into()),
-			vec![],
+			factories,
 			false,
 			&mut Vec::new().into_iter(),
-		)?;
-
-		b.populate_from(&header);
-		b.push_transactions(transactions)?;
-
-		for u in block.uncles {
-			b.push_uncle(u)?;
-		}
-
-		b.close_and_lock()
+		)
 	}
 
 	/// Enact the block given by `block_bytes` using `engine` on the database `db` with given `parent` block header. Seal the block aferwards
@@ -669,7 +630,7 @@ mod tests {
 	) -> Result<SealedBlock, Error> {
 		let header = Unverified::from_rlp(block_bytes.clone())?.header;
 		Ok(enact_bytes(block_bytes, engine, tracing, db, parent, last_hashes, factories)?
-		   .seal(engine, header.seal().to_vec())?)
+			.seal(engine, header.seal().to_vec())?)
 	}
 
 	#[test]
diff --git a/ethcore/src/client/client.rs b/ethcore/src/client/client.rs
index d40fc3033..2ba56ad8b 100644
--- a/ethcore/src/client/client.rs
+++ b/ethcore/src/client/client.rs
@@ -45,7 +45,7 @@ use types::receipt::{Receipt, LocalizedReceipt};
 use types::{BlockNumber, header::{Header, ExtendedHeader}};
 use vm::{EnvInfo, LastHashes};
 
-use block::{IsBlock, LockedBlock, Drain, ClosedBlock, OpenBlock, enact_verified, SealedBlock};
+use block::{IsBlock, LockedBlock, Drain, ClosedBlock, OpenBlock, enact, SealedBlock};
 use client::ancient_import::AncientVerifier;
 use client::{
 	Nonce, Balance, ChainInfo, BlockInfo, TransactionInfo,
@@ -407,8 +407,11 @@ impl Importer {
 		let db = client.state_db.read().boxed_clone_canon(header.parent_hash());
 
 		let is_epoch_begin = chain.epoch_transition(parent.number(), *header.parent_hash()).is_some();
-		let enact_result = enact_verified(
-			block,
+
+		let enact_result = enact(
+			block.header,
+			block.transactions,
+			block.uncles,
 			engine,
 			client.tracedb.read().tracing_enabled(),
 			db,
@@ -2521,7 +2524,7 @@ impl SnapshotClient for Client {}
 
 impl Drop for Client {
 	fn drop(&mut self) {
-		self.engine.stop();
+		Arc::get_mut(&mut self.engine).and_then(|x| Some(x.stop()));
 	}
 }
 
diff --git a/ethcore/src/engines/clique/block_state.rs b/ethcore/src/engines/clique/block_state.rs
new file mode 100644
index 000000000..08b230d59
--- /dev/null
+++ b/ethcore/src/engines/clique/block_state.rs
@@ -0,0 +1,206 @@
+// Copyright 2015-2019 Parity Technologies (UK) Ltd.
+// This file is part of Parity Ethereum.
+
+// Parity Ethereum is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// Parity Ethereum is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with Parity Ethereum.  If not, see <http://www.gnu.org/licenses/>.
+
+use std::collections::{HashMap, VecDeque};
+use std::time::{Duration, SystemTime};
+use std::time::UNIX_EPOCH;
+
+use ethereum_types::Address;
+use rand::Rng;
+
+use engines::clique::{VoteType, DIFF_INTURN, DIFF_NOTURN, NONCE_AUTH_VOTE, NONCE_DROP_VOTE, NULL_AUTHOR, SIGNING_DELAY_NOTURN_MS};
+use engines::clique::util::{extract_signers, recover_creator};
+use error::Error;
+use types::header::Header;
+
+
+#[derive(Clone, Debug)]
+pub struct CliqueBlockState {
+	pub votes: HashMap<(Address, Address), VoteType>, // k: (Voter, beneficiary), VoteType)
+	pub votes_history: Vec<(u64, Address, VoteType, Address)>, // blockNumber, Voter, VoteType, beneficiary
+	pub signers: Vec<Address>,
+	pub recent_signers: VecDeque<Address>,
+	pub next_timestamp_inturn: Option<SystemTime>, // inturn signing should wait until this time
+	pub next_timestamp_noturn: Option<SystemTime>, // noturn signing should wait until this time
+}
+
+impl CliqueBlockState {
+	/// Create new state with given information, this is used creating new state from Checkpoint block.
+	pub fn new(_author: Address, signers_sorted: Vec<Address>) -> Self {
+		return CliqueBlockState {
+			votes: Default::default(),
+			votes_history: Default::default(),
+			signers: signers_sorted,
+			recent_signers: Default::default(),
+			next_timestamp_inturn: None,
+			next_timestamp_noturn: None,
+		};
+	}
+
+	// see https://github.com/ethereum/go-ethereum/blob/master/consensus/clique/clique.go#L474
+	fn verify(&self, header: &Header) -> Result<(Address), Error>{
+		let creator = recover_creator(header)?.clone();
+
+		// Check signer list
+		if !self.signers.contains(&creator) {
+			trace!(target: "engine", "current state: {:?}", self);
+			return Err(From::from(format!("Error applying #{}({}): {} is not in the signer list!",
+			                              header.number(),
+			                              header.hash(),
+				                          creator)));
+		}
+
+		// Check recent signer.
+		if self.recent_signers.contains(&creator) {
+			trace!(target: "engine", "current state: {:?}", self);
+			return Err(From::from(format!("Error applying #{}({}): {} is in the recent_signer list!",
+			                              header.number(),
+			                              header.hash(),
+			                              creator)));
+		}
+
+		// Ensure that the difficulty corresponds to the turn-ness of the signer
+		let inturn = self.inturn(header.number(), &creator);
+
+		if (inturn && *header.difficulty() != DIFF_INTURN) ||
+			(!inturn && *header.difficulty() != DIFF_NOTURN) {
+			return Err(From::from(format!("Error applying #{}({}): wrong difficulty!",
+			                              header.number(),
+			                              header.hash())));
+		}
+
+		Ok(creator)
+	}
+
+	/// Verify and apply an new header to current state, might fail with error.
+	pub fn apply(&mut self, header: &Header, is_checkpoint: bool) -> Result<Address, Error> {
+		let creator = self.verify(header)?;
+
+		// rotate recent signers.
+		self.recent_signers.push_front(creator.clone());
+		if self.recent_signers.len() >= ( self.signers.len() / 2 ) + 1 {
+			self.recent_signers.pop_back();
+		}
+
+		if is_checkpoint {
+			// checkpoint block should not affect previous tallying, so we check that.
+			let signers = extract_signers(header)?;
+			if self.signers != signers {
+				return Err(From::from("checkpoint block signers is different than expected"));
+			};
+
+			self.votes.clear();
+			self.votes_history.clear();
+
+			// maybe release some memory.
+			self.votes.shrink_to_fit();
+			self.votes_history.shrink_to_fit();
+
+			return Ok(creator);
+		}
+
+		let beneficiary = *header.author();
+
+		// No vote, ignore.
+		if beneficiary == NULL_AUTHOR {
+			return Ok(creator);
+		}
+
+		let nonce = header.decode_seal::<Vec<&[u8]>>().unwrap()[1];
+
+		let vote_type: VoteType;
+
+		if NONCE_AUTH_VOTE == nonce {
+			vote_type = VoteType::Add;
+		} else if NONCE_DROP_VOTE == nonce {
+			vote_type = VoteType::Remove;
+		} else {
+			return Err(From::from("beneficiary specified but nonce was not AUTH or DROP"));
+		};
+
+		// Record this vote, also since we are using an hashmap, it will override previous vote.
+		self.votes.insert((creator.clone(), beneficiary), vote_type);
+		self.votes_history.push((header.number(), creator.clone(), vote_type, beneficiary));
+
+		// Tally up current target votes.
+		let threshold = self.signers.len() / 2;
+		let vote = self.votes.iter().filter(|(key, value)| {
+			(**key).1 == beneficiary && **value == vote_type
+		}).count();
+
+		if vote > threshold {
+			match vote_type {
+				VoteType::Add => {
+					self.signers.push(beneficiary);
+				},
+				VoteType::Remove => {
+					let pos = self.signers.binary_search(&beneficiary);
+					if pos.is_ok() {
+						self.signers.remove(pos.unwrap());
+					}
+				}
+			}
+
+			self.signers.sort();
+
+			// Remove all votes about or made by this beneficiary
+			{
+				let votes_copy = self.votes.clone();
+				let items: Vec<_> = votes_copy.iter().filter(|(key, _value)| {
+					(**key).0 == beneficiary || (**key).1 == beneficiary
+				}).collect();
+
+				for (key, _) in items {
+					self.votes.remove(&key);
+				}
+			}
+		}
+
+		// No cascading votes.
+		Ok(creator)
+	}
+
+	pub fn calc_next_timestamp(&mut self, header: &Header, period: u64) {
+		let base_time = UNIX_EPOCH + Duration::from_secs(header.timestamp());
+
+		self.next_timestamp_inturn = Some(base_time + Duration::from_secs(period));
+
+		let delay = Duration::from_millis(
+			rand::thread_rng().gen_range(0u64, (self.signers.len() as u64 / 2 + 1) * SIGNING_DELAY_NOTURN_MS));
+		self.next_timestamp_noturn = Some(base_time + Duration::from_secs(period) + delay);
+	}
+
+	pub fn inturn(&self, current_block_number: u64, author: &Address) -> bool {
+		if let Some(pos) = self.signers.iter().position(|x| *author == *x) {
+			return current_block_number % self.signers.len() as u64 == pos as u64;
+		}
+		return false;
+	}
+
+	pub fn is_authoirzed(&self, author: &Address) -> bool {
+		return self.signers.contains(author) && !self.recent_signers.contains(author);
+	}
+
+	// returns whether it makes sense to cast the specified vote in the
+	// current state (e.g. don't try to add an already authorized signer).
+	pub fn is_valid_vote(&self, address: &Address, vote_type: VoteType) -> bool {
+		let res = self.signers.binary_search(address);
+		match vote_type {
+			VoteType::Add => { return res.is_ok(); },
+			VoteType::Remove => { return res.is_err(); },
+		}
+	}
+}
diff --git a/ethcore/src/engines/clique/mod.rs b/ethcore/src/engines/clique/mod.rs
new file mode 100644
index 000000000..25b94117e
--- /dev/null
+++ b/ethcore/src/engines/clique/mod.rs
@@ -0,0 +1,670 @@
+// Copyright 2015-2019 Parity Technologies (UK) Ltd.
+// This file is part of Parity Ethereum.
+
+// Parity Ethereum is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// Parity Ethereum is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with Parity Ethereum.  If not, see <http://www.gnu.org/licenses/>.
+
+//! Implementation of Clique (POA) Engine.
+//!
+//! mod.rs -> CliqueEngine, the engine api implementation, with additional block state tracking.
+//! block_state.rs -> CliqueBlockState , record clique state for given block.
+//! param.rs -> Clique Params.
+//! step_service.rs -> an event loop to trigger sealing.
+//! util.rs -> various standalone util functions
+//!
+
+/// How syncing code path works:
+/// 1. Client calls `engine.verify_block_basic()` then `engine.verify_block_unordered()`.
+/// 2. Client calls `engine.verify_block_family(header, parent)`.
+/// 3. Engine first needs to find parent state: `state = self.state(parent.hash())`
+///    if not found, trigger a back-fill from last checkpoint.
+/// 4. Engine calls `state.apply(header)` and record the new state.
+
+/// About executive_author()
+/// Clique use author field for voting, the real author is hidden in the extra_data field. So
+/// When executing transactions (in `enact()`, it will calls engine.executive_author() and use that.
+
+/// How sealing works:
+/// 1. implement `engine.set_signer()`. on startup, if miner account was setup on config/cli,
+///    `miner.set_author()` which will eventually be pass to here.
+/// 2. make `engine.seals_internally()` return Some(true).
+/// 3. on Clique::new setup IOService that impalement an timer that just calls `engine.step()`,
+///    which just calls `engine.client.update_sealing()` which triggers generating an new block.
+/// 4. `engine.generate_seal()` will be called by miner, which should return either Seal::None or Seal:Regular.
+///   a. return `Seal::None` if no signer or signer is not authorized.
+///   b. if period == 0 and block has transactions -> Seal::Regular, else Seal::None
+///   c. if we INTURN, wait for at least `period` since last block, otherwise wait for an random using algorithm as
+///      specified in the EIP.
+/// 5. Miner will create new block, in process it will call several engine method, which they need to do following:
+///   a. `engine_open_header_timestamp()` must set timestamp correctly.
+///   b. `engine.populate_from_parent()` must set difficulty to correct value. NOTE: this is used both in SYNCing and
+///       SEALing code path, for now we use an ugly hack to differentiate.
+/// 6. Implement `engine.on_seal_block()`, which is the new hook that allow modifying header after block is locked.
+/// 7. `engine.verify_local_seal()` will later be called, then normal syncing code path will also be called to import
+///    the new block.
+
+use std::cmp;
+use std::collections::VecDeque;
+use std::sync::{Arc, Weak};
+use std::time;
+use std::time::SystemTime;
+use std::time::UNIX_EPOCH;
+
+use ethereum_types::{Address, H160, H256, U256};
+use hash::KECCAK_EMPTY_LIST_RLP;
+use itertools::Itertools;
+use lru_cache::LruCache;
+use parking_lot::RwLock;
+use rlp::encode;
+
+use block::*;
+use client::{BlockId, EngineClient};
+use engines::{Engine, Seal};
+use engines::clique::util::{extract_signers, recover_creator};
+use error::Error;
+use ethkey::Signature;
+use machine::{Call, EthereumMachine};
+use types::BlockNumber;
+use types::header::{ExtendedHeader, Header};
+
+use super::signer::EngineSigner;
+
+use self::block_state::CliqueBlockState;
+use self::params::CliqueParams;
+use self::step_service::StepService;
+use std::collections::HashMap;
+use rand::Rng;
+use std::thread;
+use std::time::Duration;
+
+mod params;
+mod block_state;
+mod step_service;
+mod util;
+
+// protocol constants
+/// Fixed number of extra-data prefix bytes reserved for signer vanity
+pub const SIGNER_VANITY_LENGTH: usize = 32;
+/// Fixed number of extra-data suffix bytes reserved for signer signature
+pub const SIGNER_SIG_LENGTH: usize = 65;
+/// Nonce value for DROP vote
+pub const NONCE_DROP_VOTE: [u8; 8] = [0x00; 8];
+/// Nonce value for AUTH vote
+pub const NONCE_AUTH_VOTE: [u8; 8] = [0xff; 8];
+/// Difficulty for INTURN block
+pub const DIFF_INTURN: U256 = U256([2, 0, 0, 0]);
+/// Difficulty for NOTURN block
+pub const DIFF_NOTURN: U256 = U256([1, 0, 0, 0]);
+/// Default empty author field value
+pub const NULL_AUTHOR: Address = H160([0x00; 20]);
+/// Default empty nonce value
+pub const NULL_NONCE: [u8; 8] = NONCE_DROP_VOTE;
+/// Default value for mixhash
+pub const NULL_MIXHASH: [u8; 32] = [0x00; 32];
+/// Default value for uncles hash
+pub const NULL_UNCLES_HASH: H256 = KECCAK_EMPTY_LIST_RLP;
+/// Default noturn block wiggle factor defined in spec.
+pub const SIGNING_DELAY_NOTURN_MS: u64 = 500;
+
+#[derive(PartialEq, Clone, Debug, Copy)]
+pub enum VoteType {
+	Add,
+	Remove,
+}
+
+// Caches
+/// How many CliqueBlockState to cache in the memory.
+pub const STATE_CACHE_NUM: usize = 128;
+
+/// Clique Engine implementation
+/// block_state_by_hash -> block state indexed by header hash.
+pub struct Clique {
+	epoch_length: u64,
+	period: u64,
+	machine: EthereumMachine,
+	client: RwLock<Option<Weak<EngineClient>>>,
+	block_state_by_hash: RwLock<LruCache<H256, CliqueBlockState>>,
+	proposals: RwLock<HashMap<Address, VoteType>>,
+	signer: RwLock<Option<Box<EngineSigner>>>,
+	step_service: Option<Arc<StepService>>,
+}
+
+impl Clique {
+	/// Initialize Clique engine from empty state.
+	pub fn new(our_params: CliqueParams, machine: EthereumMachine) -> Result<Arc<Self>, Error> {
+		let mut engine = Clique {
+			epoch_length: our_params.epoch,
+			period: our_params.period,
+			client: RwLock::new(Option::default()),
+			block_state_by_hash: RwLock::new(LruCache::new(STATE_CACHE_NUM)),
+			proposals: RwLock::new(Default::default()),
+			signer: RwLock::new(Default::default()),
+			machine,
+			step_service: None,
+		};
+
+		let res =  Arc::new(engine);
+
+		if our_params.period > 0 {
+			engine.step_service = Some(StepService::start(Arc::downgrade(&res) as Weak<Engine<_>>));
+		}
+
+		Ok(res)
+	}
+
+	fn sign_header(&self, header: &Header) -> Result<(Signature, H256), Error> {
+		match self.signer.read().as_ref() {
+			None => {
+				return Err(Box::new("sign_header: No signer available.").into());
+			}
+			Some(signer) => {
+				let digest = header.hash();
+				match signer.sign(digest) {
+					Ok(sig) => {
+						return Ok((sig, digest));
+					}
+					Err(e) => {
+						return Err(Box::new(format!("sign_header: failed to sign header, error: {}", e)).into());
+					}
+				}
+			}
+		}
+	}
+
+	/// Construct an new state from given checkpoint header.
+	fn new_checkpoint_state(&self, header: &Header) -> Result<CliqueBlockState, Error> {
+		assert_eq!(header.number() % self.epoch_length, 0);
+
+		let mut state = CliqueBlockState::new(
+			match header.number() {
+				0 => NULL_AUTHOR,
+				_ => recover_creator(header)?,
+			},
+			extract_signers(header)?);
+
+		state.calc_next_timestamp(header, self.period);
+
+		Ok(state)
+	}
+
+	fn state_no_backfill(&self, hash: &H256) -> Option<CliqueBlockState> {
+		return self.block_state_by_hash.write().get_mut(hash).cloned();
+	}
+
+	/// get CliqueBlockState for given header, backfill from last checkpoint if needed.
+	fn state(&self, header: &Header) -> Result<CliqueBlockState, Error> {
+		let mut block_state_by_hash = self.block_state_by_hash.write();
+		if let Some(state) = block_state_by_hash.get_mut(&header.hash()) {
+			return Ok(state.clone());
+		}
+		// If we are looking for an checkpoint block state, we can directly reconstruct it.
+		if header.number() % self.epoch_length == 0 {
+			let state = self.new_checkpoint_state(header)?;
+			block_state_by_hash.insert(header.hash().clone(), state.clone());
+			return Ok(state);
+		}
+		// BlockState is not found in memory, which means we need to reconstruct state from last checkpoint.
+		match self.client.read().as_ref().and_then(|w| { w.upgrade() }) {
+			None => {
+				return Err(From::from("failed to upgrade client reference"));
+			}
+			Some(c) => {
+				let last_checkpoint_number = (header.number() / self.epoch_length as u64) * self.epoch_length;
+				assert_ne!(last_checkpoint_number, header.number());
+
+				let mut chain: &mut VecDeque<Header> = &mut VecDeque::with_capacity(
+					(header.number() - last_checkpoint_number + 1) as usize);
+
+				// Put ourselves in.
+				chain.push_front(header.clone());
+
+				// populate chain to last checkpoint
+				let mut last = chain.front().ok_or(
+					"just pushed to front, reference must exist;")?.clone();
+
+				while last.number() != last_checkpoint_number + 1 {
+					match c.block_header(BlockId::Hash(*last.parent_hash())) {
+						None => {
+							return Err(Box::new(
+								format!("parent block {} of {} could not be recovered.",
+										&last.parent_hash(), &last.hash())
+							).into());
+						}
+						Some(next) => {
+							chain.push_front(next.decode()?.clone());
+							last = chain.front().ok_or(
+								"just pushed to front, reference must exist;")?.clone();
+						}
+					}
+				}
+
+				// Catching up state, note that we don't really store block state for intermediary blocks,
+				// for speed.
+				let backfill_start = time::Instant::now();
+				info!(target: "engine",
+					  "Back-filling block state. last_checkpoint_number: {}, target: {}({}).",
+					  last_checkpoint_number, header.number(), header.hash());
+
+				// Get the state for last checkpoint.
+				let last_checkpoint_hash = *(chain.front().ok_or(
+					"just pushed to front, reference must exist; qed"
+				)?.parent_hash());
+				let last_checkpoint_header = match c.block_header(BlockId::Hash(last_checkpoint_hash)) {
+					None => return Err(From::from("Unable to find last checkpoint block")),
+					Some(header) => header.decode()?,
+				};
+
+				let last_checkpoint_state: CliqueBlockState;
+
+				// We probably don't have it cached, but try anyway.
+				if let Some(st) = block_state_by_hash.get_mut(&last_checkpoint_hash) {
+					last_checkpoint_state = (*st).clone();
+				} else {
+					last_checkpoint_state = self.new_checkpoint_state(&last_checkpoint_header)?;
+				}
+				block_state_by_hash.insert(last_checkpoint_header.hash().clone(), last_checkpoint_state.clone());
+
+				// Backfill!
+				let mut new_state = last_checkpoint_state.clone();
+				for item in chain {
+					new_state.apply(item, false)?;
+				}
+				new_state.calc_next_timestamp(header, self.period);
+				block_state_by_hash.insert(header.hash(), new_state.clone());
+
+				let elapsed = backfill_start.elapsed();
+				info!(target: "engine",
+					  "Back-filling succeed, took {} ms.",
+					  elapsed.as_secs() * 1000 + elapsed.subsec_millis() as u64,
+				);
+
+				Ok(new_state)
+			}
+		}
+	}
+}
+
+impl Engine<EthereumMachine> for Clique {
+	fn name(&self) -> &str { "Clique" }
+
+	fn machine(&self) -> &EthereumMachine { &self.machine }
+	/// Clique use same fields, nonce + mixHash
+	fn seal_fields(&self, _header: &Header) -> usize { 2 }
+	fn maximum_uncle_count(&self, _block: BlockNumber) -> usize { 0 }
+
+	// No Uncle in Clique
+	fn maximum_uncle_age(&self) -> usize { 0 }
+
+	fn on_new_block(
+		&self,
+		_block: &mut ExecutedBlock,
+		_epoch_begin: bool,
+		_ancestry: &mut Iterator<Item=ExtendedHeader>,
+	) -> Result<(), Error> {
+		Ok(())
+	}
+
+	fn on_close_block(&self, _block: &mut ExecutedBlock) -> Result<(), Error> {
+		// Clique has no block reward.
+		Ok(())
+	}
+
+	fn on_seal_block(&self, block: &ExecutedBlock) -> Result<Option<Header>, Error> {
+		trace!(target: "engine", "on_seal_block");
+
+		let mut header = block.header().clone();
+
+		let state = self.state_no_backfill(header.parent_hash()).ok_or_else(
+			|| format!("on_seal_block: Unable to get parent state: {}", header.parent_hash())
+		)?;
+
+		let is_checkpoint = header.number() % self.epoch_length == 0;
+
+		header.set_author(NULL_AUTHOR);
+
+		// cast an random Vote if not checkpoint
+		if !is_checkpoint {
+			let votes = self.proposals.read().iter()
+				.filter(|(address, vote_type)| state.is_valid_vote(*address, **vote_type))
+				.map(|(address, vote_type)| (*address, *vote_type))
+				.collect_vec();
+
+			if !votes.is_empty() {
+				// Pick an random vote.
+				let random_vote = rand::thread_rng().gen_range(0 as usize, votes.len());
+				let (beneficiary, vote_type) = votes[random_vote];
+
+				trace!(target: "engine", "Casting vote: beneficiary {}, type {:?} ", beneficiary, vote_type);
+
+				header.set_author(beneficiary);
+
+				header.set_seal(
+					match vote_type {
+						VoteType::Add => { vec!(encode(&NULL_MIXHASH.to_vec()), encode(&NONCE_AUTH_VOTE.to_vec())) }
+						VoteType::Remove => { vec!(encode(&NULL_MIXHASH.to_vec()), encode(&NONCE_DROP_VOTE.to_vec())) }
+					}
+				)
+			}
+		}
+
+		// Work on clique seal.
+
+		let mut seal: Vec<u8> = Vec::with_capacity(SIGNER_VANITY_LENGTH + SIGNER_SIG_LENGTH);
+
+		// At this point, extra_data should only contain miner vanity.
+		if header.extra_data().len() > SIGNER_VANITY_LENGTH {
+			warn!(target: "engine", "on_seal_block: unexpected extra extra_data: {:?}", header);
+		}
+		// vanity
+		{
+			let mut vanity = header.extra_data()[0..SIGNER_VANITY_LENGTH - 1].to_vec();
+			vanity.resize(SIGNER_VANITY_LENGTH, 0u8);
+			seal.extend_from_slice(&vanity[..]);
+		}
+
+		// If we are building an checkpoint block, add all signers now.
+		if is_checkpoint {
+			seal.reserve(state.signers.len() * 20);
+			state.signers.iter().foreach(|addr| {
+				seal.extend_from_slice(&addr[..]);
+			});
+		}
+
+		header.set_extra_data(seal.clone());
+
+		// append signature onto extra_data
+		let (sig, _msg) = self.sign_header(&header)?;
+		seal.extend_from_slice(&sig[..]);
+		header.set_extra_data(seal.clone());
+
+		header.compute_hash();
+
+		// locally sealed block don't go through valid_block_family(), so we have to record state here.
+		let mut new_state = state.clone();
+		new_state.apply(&header, header.number() % self.epoch_length == 0)?;
+		new_state.calc_next_timestamp(&header, self.period);
+		self.block_state_by_hash.write().insert(header.hash(), new_state);
+
+		trace!(target: "engine", "on_seal_block: finished, final header: {:?}", header);
+
+		Ok(Some(header))
+	}
+
+	/// Clique doesn't require external work to seal, so we always return true here.
+	fn seals_internally(&self) -> Option<bool> {
+		Some(true)
+	}
+
+	/// Returns if we are ready to seal, the real sealing (signing extra_data) is actually done in `on_seal_block()`.
+	fn generate_seal(&self, block: &ExecutedBlock, parent: &Header) -> Seal {
+		let null_seal = vec!(encode(&NULL_MIXHASH.to_vec()), encode(&NULL_NONCE.to_vec()));
+
+		trace!(target: "engine", "tried to generate seal");
+
+		if block.header.number() == 0 {
+			trace!(target: "engine", "attempted to seal genesis block");
+			return Seal::None;
+		}
+
+		// if sealing period is 0, and not an checkpoint block, refuse to seal
+		if self.period == 0 {
+			if block.transactions.is_empty() && block.header.number() % self.epoch_length != 0 {
+				return Seal::None;
+			}
+			return Seal::Regular(null_seal);
+		}
+
+		// Check we actually have authority to seal.
+		if let Some(author) = self.signer.read().as_ref().map(|x| x.address()) {
+			// ensure the voting state exists
+			match self.state(&parent) {
+				Err(e) => {
+					warn!(target: "engine", "generate_seal: can't get parent state(number: {}, hash: {}): {} ",
+						  parent.number(), parent.hash(), e);
+					return Seal::None;
+				}
+				Ok(state) => {
+					// Are we authorized to seal?
+					if !state.is_authoirzed(&author) {
+						trace!(target: "engine", "generate_seal: Not authorized to sign right now.");
+						// wait for one third of period to try again.
+						thread::sleep(Duration::from_secs(self.period / 3 + 1));
+						return Seal::None;
+					}
+
+					let inturn = state.inturn(block.header.number(), &author);
+
+					let now = SystemTime::now();
+
+					let limit = match inturn {
+						true => state.next_timestamp_inturn.unwrap_or(now),
+						false => state.next_timestamp_noturn.unwrap_or(now),
+					};
+
+					// Wait for the right moment.
+					if now < limit {
+						trace!(target: "engine",
+							   "generate_seal: sleeping to sign: inturn: {}, now: {:?}, to: {:?}.",
+							   inturn, now, limit);
+						match limit.duration_since(SystemTime::now()) {
+							Ok(duration) => {
+								thread::sleep(duration);
+							},
+							Err(e) => {
+								warn!(target:"engine", "generate_seal: unable to sleep, err: {}", e);
+								return Seal::None;
+							}
+						}
+					}
+
+					trace!(target: "engine", "generate_seal: seal ready for block {}, txs: {}.",
+						   block.header.number(), block.transactions.len());
+					return Seal::Regular(null_seal);
+				}
+			}
+		}
+		Seal::None
+	}
+
+	fn verify_local_seal(&self, _header: &Header) -> Result<(), Error> { Ok(()) }
+
+	fn verify_block_basic(&self, header: &Header) -> Result<(), Error> {
+		// Largely same as https://github.com/ethereum/go-ethereum/blob/master/consensus/clique/clique.go#L275
+
+		// Ignore genesis block.
+		if header.number() == 0 {
+			return Ok(());
+		}
+
+		// Don't waste time checking blocks from the future
+		{
+			let limit = SystemTime::now().duration_since(UNIX_EPOCH).unwrap_or_default().as_secs() + self.period;
+			if header.timestamp() > limit {
+				return Err(Box::new(
+					format!("Block is too far in the future, timestamp: {}, limit: {}", header.timestamp(), limit)
+				).into());
+			}
+		}
+
+		let is_checkpoint = header.number() % self.epoch_length == 0;
+
+		if is_checkpoint && *header.author() != NULL_AUTHOR {
+			return Err(Box::new("Checkpoint block must enforce zero beneficiary").into());
+		}
+
+		// Nonce must be 0x00..0 or 0xff..f
+		let nonce = header.decode_seal::<Vec<&[u8]>>()?[1];
+		if *nonce != NONCE_DROP_VOTE && *nonce != NONCE_AUTH_VOTE {
+			return Err(Box::new("nonce must be 0x00..0 or 0xff..f").into());
+		}
+		if is_checkpoint && *nonce != NULL_NONCE[..] {
+			return Err(Box::new("Checkpoint block must have zero nonce").into());
+		}
+
+		// Ensure that the extra-data contains a signer list on checkpoint, but none otherwise.
+		if (!is_checkpoint && header.extra_data().len() != (SIGNER_VANITY_LENGTH + SIGNER_SIG_LENGTH))
+			|| (is_checkpoint && header.extra_data().len() <= (SIGNER_VANITY_LENGTH + SIGNER_SIG_LENGTH))
+			|| (is_checkpoint && (header.extra_data().len() - (SIGNER_VANITY_LENGTH + SIGNER_SIG_LENGTH)) % 20 != 0) {
+			return Err(Box::new(format!("Invalid extra_data length, got {}", header.extra_data().len())).into());
+		}
+
+		// Ensure that the mix digest is zero as we don't have fork protection currently
+		let mixhash = header.decode_seal::<Vec<&[u8]>>()?[0];
+		if mixhash != NULL_MIXHASH {
+			return Err(Box::new("mixhash must be 0x00..0 or 0xff..f.").into());
+		}
+
+		// Ensure that the block doesn't contain any uncles which are meaningless in PoA
+		if *header.uncles_hash() != NULL_UNCLES_HASH {
+			return Err(Box::new(format!(
+				"Invalid uncle hash, got: {}, expected: {}.",
+				header.uncles_hash(),
+				NULL_UNCLES_HASH,
+			)).into());
+		}
+
+		// Ensure that the block's difficulty is meaningful (may not be correct at this point)
+		if *header.difficulty() != DIFF_INTURN && *header.difficulty() != DIFF_NOTURN {
+			return Err(Box::new(format!(
+				"invalid difficulty: expected {} or {}, got: {}.",
+				DIFF_INTURN,
+				DIFF_NOTURN,
+				header.difficulty(),
+			)).into());
+		}
+
+		// All basic checks passed, continue to next phase
+		Ok(())
+	}
+
+	fn verify_block_unordered(&self, _header: &Header) -> Result<(), Error> {
+		// Nothing to check here.
+		Ok(())
+	}
+
+	/// Verify block family by looking up parent state (backfill if needed), then try to apply current header.
+	/// see https://github.com/ethereum/go-ethereum/blob/master/consensus/clique/clique.go#L338
+	fn verify_block_family(&self, header: &Header, parent: &Header) -> Result<(), Error> {
+		// Ignore genesis block.
+		if header.number() == 0 {
+			return Ok(());
+		}
+
+		// parent sanity check
+		if parent.hash() != *header.parent_hash() || header.number() != parent.number() + 1 {
+			return Err(Box::new("invalid parent").into());
+		}
+
+		// Ensure that the block's timestamp isn't too close to it's parent
+		if parent.timestamp() + self.period > header.timestamp() {
+			return Err(Box::new("invalid timestamp").into());
+		}
+
+		// Retrieve the parent state
+		let parent_state = self.state(&parent)?;
+
+		// Try to apply current state, apply() will further check signer and recent signer.
+		let mut new_state = parent_state.clone();
+		new_state.apply(header, header.number() % self.epoch_length == 0)?;
+		new_state.calc_next_timestamp(header, self.period);
+		self.block_state_by_hash.write().insert(header.hash(), new_state);
+
+		Ok(())
+	}
+
+	fn genesis_epoch_data(&self, header: &Header, _call: &Call) -> Result<Vec<u8>, String> {
+		let mut state = self.new_checkpoint_state(header).expect("Unable to parse genesis data.");
+		state.calc_next_timestamp(header, self.period);
+		self.block_state_by_hash.write().insert(header.hash(), state);
+
+		Ok(Vec::new())
+	}
+
+	// Our task here is to set difficulty
+	fn populate_from_parent(&self, header: &mut Header, parent: &Header) {
+		// TODO: this is a horrible hack, it is due to the fact that enact and miner both use
+		// OpenBlock::new() which will both call this function. more refactoring is definitely needed.
+		match header.extra_data().len() >= SIGNER_VANITY_LENGTH + SIGNER_SIG_LENGTH {
+			true => {
+				// we are importing blocks, do nothing.
+			}
+			false => {
+				trace!(target: "engine", "populate_from_parent in sealing");
+
+				// It's unclear how to prevent creating new blocks unless we are authorized, the best way (and geth does this too)
+				// it's just to ignore setting an correct difficulty here, we will check authorization in next step in generate_seal anyway.
+				if let Some(signer) = self.signer.read().as_ref() {
+					match self.state(&parent) {
+						Err(e) => {
+							trace!(target: "engine", "populate_from_parent: Unable to find parent state: {}, ignored.", e);
+						}
+						Ok(state) => {
+							if state.is_authoirzed(&signer.address()) {
+								if state.inturn(header.number(), &signer.address()) {
+									header.set_difficulty(DIFF_INTURN);
+								} else {
+									header.set_difficulty(DIFF_NOTURN);
+								}
+							}
+						}
+					}
+				}
+			}
+		}
+	}
+
+	fn set_signer(&self, signer: Box<EngineSigner>) {
+		trace!(target: "engine", "set_signer: {}", signer.address());
+
+		*self.signer.write() = Some(signer);
+	}
+
+	fn register_client(&self, client: Weak<EngineClient>) {
+		*self.client.write() = Some(client.clone());
+	}
+
+	fn step(&self) {
+		if self.signer.read().is_some() {
+			if let Some(ref weak) = *self.client.read() {
+				if let Some(c) = weak.upgrade() {
+					c.update_sealing();
+				}
+			}
+		}
+	}
+
+	fn stop(&mut self) {
+		if let Some(mut s) = self.step_service.as_mut() {
+			Arc::get_mut(&mut s).map(|x| x.stop());
+		}
+	}
+
+	/// Clique timestamp is set to parent + period , or current time which ever is higher.
+	fn open_block_header_timestamp(&self, parent_timestamp: u64) -> u64 {
+		let now = time::SystemTime::now().duration_since(time::UNIX_EPOCH).unwrap_or_default();
+		cmp::max(now.as_secs() as u64, parent_timestamp + self.period)
+	}
+
+	fn is_timestamp_valid(&self, header_timestamp: u64, parent_timestamp: u64) -> bool {
+		header_timestamp >= parent_timestamp + self.period
+	}
+
+	fn fork_choice(&self, new: &ExtendedHeader, current: &ExtendedHeader) -> super::ForkChoice {
+		super::total_difficulty_fork_choice(new, current)
+	}
+
+	fn executive_author(&self, header: &Header) -> Address {
+		// Should have been verified now.
+		return recover_creator(header).expect("Unable to extract creator.");
+	}
+}
diff --git a/ethcore/src/engines/clique/params.rs b/ethcore/src/engines/clique/params.rs
new file mode 100644
index 000000000..c274a2294
--- /dev/null
+++ b/ethcore/src/engines/clique/params.rs
@@ -0,0 +1,35 @@
+// Copyright 2015-2019 Parity Technologies (UK) Ltd.
+// This file is part of Parity Ethereum.
+
+// Parity Ethereum is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// Parity Ethereum is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with Parity Ethereum.  If not, see <http://www.gnu.org/licenses/>.
+
+//! Clique specific parameters.
+
+use ethjson;
+
+/// `Clique` params.
+pub struct CliqueParams {
+	/// List of validators.
+	pub period: u64,
+	pub epoch: u64,
+}
+
+impl From<ethjson::spec::CliqueParams> for CliqueParams {
+	fn from(p: ethjson::spec::CliqueParams) -> Self {
+		CliqueParams {
+			period: p.period.map_or_else(|| 30000 as u64, Into::into),
+			epoch: p.epoch.map_or_else(|| 15 as u64, Into::into),
+		}
+	}
+}
diff --git a/ethcore/src/engines/clique/step_service.rs b/ethcore/src/engines/clique/step_service.rs
new file mode 100644
index 000000000..c6c724317
--- /dev/null
+++ b/ethcore/src/engines/clique/step_service.rs
@@ -0,0 +1,72 @@
+// Copyright 2015-2019 Parity Technologies (UK) Ltd.
+// This file is part of Parity Ethereum.
+
+// Parity Ethereum is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// Parity Ethereum is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with Parity Ethereum.  If not, see <http://www.gnu.org/licenses/>.
+
+use engines::Engine;
+use parity_machine::Machine;
+use std::sync::Weak;
+use std::time::Duration;
+use std::thread;
+use std::sync::Arc;
+use parking_lot::RwLock;
+
+pub struct StepService {
+	shutdown: Arc<RwLock<bool>>,
+	thread: Option<thread::JoinHandle<()>>,
+}
+
+impl StepService {
+	pub fn start<M: Machine + 'static>(engine: Weak<Engine<M>>) -> Arc<Self> {
+		let shutdown = Arc::new(RwLock::new(false));
+		let shutdown1 = shutdown.clone();
+
+		let thread = thread::Builder::new()
+			.name("CliqueMiner".into())
+			.spawn(move || {
+				// startup delay.
+				thread::sleep(Duration::from_secs(5));
+
+				loop {
+					// see if we are in shutdown.
+					if *shutdown.read() == true {
+							trace!(target:"miner", "StepService: received shutdown signal!");
+							break;
+					}
+
+					trace!(target: "miner", "StepService: triggering sealing");
+
+					// Try sealing
+					engine.upgrade().map(|x| x.step());
+
+					// Yield
+					thread::sleep(Duration::from_millis(2000));
+				}
+				trace!(target: "miner", "StepService: shut down.");
+			}).expect("Unable to launch thread.");
+
+		Arc::new(StepService {
+			shutdown: shutdown1,
+			thread: Some(thread),
+		})
+	}
+
+	pub fn stop(&mut self) {
+		trace!(target: "miner", "StepService: shutting down.");
+		*self.shutdown.write() = true;
+		if let Some(t) = self.thread.take() {
+			t.join().expect("Thread panicked!");
+		}
+	}
+}
diff --git a/ethcore/src/engines/clique/util.rs b/ethcore/src/engines/clique/util.rs
new file mode 100644
index 000000000..d5e38f868
--- /dev/null
+++ b/ethcore/src/engines/clique/util.rs
@@ -0,0 +1,81 @@
+use ethereum_types::{Address, H256};
+use lru_cache::LruCache;
+use parking_lot::RwLock;
+
+use engines::clique::{SIGNER_SIG_LENGTH, SIGNER_VANITY_LENGTH};
+use error::Error;
+use ethkey::{public_to_address, recover as ec_recover, Signature};
+use types::header::Header;
+
+/// How many recovered signature to cache in the memory.
+pub const CREATOR_CACHE_NUM: usize = 4096;
+lazy_static! {
+	/// key: header hash
+	/// value: creator address
+	static ref CREATOR_BY_HASH: RwLock<LruCache<H256, Address>> = RwLock::new(LruCache::new(CREATOR_CACHE_NUM));
+}
+
+/// Recover block creator from signature
+pub fn recover_creator(header: &Header) -> Result<Address, Error> {
+	// Initialization
+	let mut cache = CREATOR_BY_HASH.write();
+
+	if let Some(creator) = cache.get_mut(&header.hash()) {
+		return Ok(*creator);
+	}
+
+	let data = header.extra_data();
+	let mut sig_data = data[data.len() - SIGNER_SIG_LENGTH..].to_vec();
+	sig_data.resize(SIGNER_SIG_LENGTH, 0);
+
+	let mut sig = [0; SIGNER_SIG_LENGTH];
+	sig.copy_from_slice(&sig_data[..]);
+
+	let reduced_header = &mut header.clone();
+	reduced_header.set_extra_data(data[..data.len() - SIGNER_SIG_LENGTH].to_vec());
+
+	let msg = reduced_header.hash();
+	let pubkey = ec_recover(&Signature::from(sig), &msg)?;
+	let creator = public_to_address(&pubkey);
+
+	cache.insert(header.hash(), creator.clone());
+	Ok(creator)
+}
+
+
+/// Extract signer list from extra_data.
+///
+/// Layout of extra_data:
+/// ----
+/// VANITY: 32 bytes
+/// Signers: N * 32 bytes as hex encoded (20 characters)
+/// Signature: 65 bytes
+/// --
+pub fn extract_signers(header: &Header) -> Result<Vec<Address>, Error> {
+	let data = header.extra_data();
+
+	if data.len() <= SIGNER_VANITY_LENGTH + SIGNER_SIG_LENGTH {
+		return Err(Box::new("Invalid extra_data size.").into());
+	}
+
+	// extract only the portion of extra_data which includes the signer list
+	let signers_raw = &data[(SIGNER_VANITY_LENGTH)..data.len() - (SIGNER_SIG_LENGTH)];
+
+	if signers_raw.len() % 20 != 0 {
+		return Err(Box::new("bad signer list.").into());
+	}
+
+	let num_signers = signers_raw.len() / 20;
+	let mut signers_list: Vec<Address> = Vec::with_capacity(num_signers);
+
+	for i in 0..num_signers {
+		let mut signer = Address::default();
+		signer.copy_from_slice(&signers_raw[i * 20..(i + 1) * 20]);
+		signers_list.push(signer);
+	}
+
+	// NOTE: signers list must be sorted by ascending order.
+	signers_list.sort();
+
+	Ok(signers_list)
+}
diff --git a/ethcore/src/engines/mod.rs b/ethcore/src/engines/mod.rs
index 9cced0a0d..8b1b74066 100644
--- a/ethcore/src/engines/mod.rs
+++ b/ethcore/src/engines/mod.rs
@@ -18,6 +18,7 @@
 
 mod authority_round;
 mod basic_authority;
+mod clique;
 mod instant_seal;
 mod null_engine;
 mod validator_set;
@@ -31,6 +32,7 @@ pub use self::epoch::{EpochVerifier, Transition as EpochTransition};
 pub use self::instant_seal::{InstantSeal, InstantSealParams};
 pub use self::null_engine::NullEngine;
 pub use self::signer::EngineSigner;
+pub use self::clique::Clique;
 
 // TODO [ToDr] Remove re-export (#10130)
 pub use types::engines::ForkChoice;
@@ -44,13 +46,12 @@ use builtin::Builtin;
 use vm::{EnvInfo, Schedule, CreateContractAddress, CallType, ActionValue};
 use error::Error;
 use types::BlockNumber;
-use types::header::Header;
 use snapshot::SnapshotComponents;
 use spec::CommonParams;
 use types::transaction::{self, UnverifiedTransaction, SignedTransaction};
-
 use ethkey::{Signature};
-use parity_machine::{Machine, LocalizedMachine as Localized, TotalScoredHeader};
+use types::header::Header;
+use parity_machine::{Machine, LocalizedMachine as Localized, TotalScoredHeader, Header as MachineHeader};
 use ethereum_types::{H256, U256, Address};
 use unexpected::{Mismatch, OutOfBounds};
 use bytes::Bytes;
@@ -118,7 +119,7 @@ pub enum Seal {
 	Proposal(Vec<Bytes>),
 	/// Regular block seal; should be part of the blockchain.
 	Regular(Vec<Bytes>),
-	/// Engine does generate seal for this block right now.
+	/// Engine does not generate seal for this block right now.
 	None,
 }
 
@@ -265,6 +266,9 @@ pub trait Engine<M: Machine>: Sync + Send {
 		Ok(())
 	}
 
+	/// Allow returning new block header after seal generation. Currently only used by Clique.
+	fn on_seal_block(&self, _block: &M::LiveBlock) -> Result<Option<M::Header>, M::Error> { Ok(None) }
+
 	/// None means that it requires external input (e.g. PoW) to seal a block.
 	/// Some(true) means the engine is currently prime for seal generation (i.e. node is the current validator).
 	/// Some(false) means that the node might seal internally but is not qualified now.
@@ -393,7 +397,7 @@ pub trait Engine<M: Machine>: Sync + Send {
 	fn step(&self) {}
 
 	/// Stops any services that the may hold the Engine and makes it safe to drop.
-	fn stop(&self) {}
+	fn stop(&mut self) {}
 
 	/// Create a factory for building snapshot chunks and restoring from them.
 	/// Returning `None` indicates that this engine doesn't support snapshot creation.
@@ -427,6 +431,9 @@ pub trait Engine<M: Machine>: Sync + Send {
 
 	/// Check whether the given new block is the best block, after finalization check.
 	fn fork_choice(&self, new: &M::ExtendedHeader, best: &M::ExtendedHeader) -> ForkChoice;
+
+	/// Return author should used in executing txns for this block.
+	fn executive_author(&self, header: &M::Header) -> Address { header.author().clone() }
 }
 
 /// Check whether a given block is the best block based on the default total difficulty rule.
diff --git a/ethcore/src/ethereum/mod.rs b/ethcore/src/ethereum/mod.rs
index b7c60789a..d37ca9b4f 100644
--- a/ethcore/src/ethereum/mod.rs
+++ b/ethcore/src/ethereum/mod.rs
@@ -94,6 +94,11 @@ pub fn new_mix<'a, T: Into<SpecParams<'a>>>(params: T) -> Spec {
 	load(params.into(), include_bytes!("../../res/ethereum/mix.json"))
 }
 
+/// Create a new Callisto chain spec
+pub fn new_callisto<'a, T: Into<SpecParams<'a>>>(params: T) -> Spec {
+	load(params.into(), include_bytes!("../../res/ethereum/callisto.json"))
+}
+
 /// Create a new Morden testnet chain spec.
 pub fn new_morden<'a, T: Into<SpecParams<'a>>>(params: T) -> Spec {
 	load(params.into(), include_bytes!("../../res/ethereum/morden.json"))
@@ -109,16 +114,26 @@ pub fn new_kovan<'a, T: Into<SpecParams<'a>>>(params: T) -> Spec {
 	load(params.into(), include_bytes!("../../res/ethereum/kovan.json"))
 }
 
+/// Create a new Rinkeby testnet chain spec.
+pub fn new_rinkeby<'a, T: Into<SpecParams<'a>>>(params: T) -> Spec {
+	load(params.into(), include_bytes!("../../res/ethereum/rinkeby.json"))
+}
+
+/// Create a new GÃ¶rli testnet chain spec.
+pub fn new_goerli<'a, T: Into<SpecParams<'a>>>(params: T) -> Spec {
+	load(params.into(), include_bytes!("../../res/ethereum/goerli.json"))
+}
+
+/// Create a new Kotti testnet chain spec.
+pub fn new_kotti<'a, T: Into<SpecParams<'a>>>(params: T) -> Spec {
+	load(params.into(), include_bytes!("../../res/ethereum/kotti.json"))
+}
+
 /// Create a new POA Sokol testnet chain spec.
 pub fn new_sokol<'a, T: Into<SpecParams<'a>>>(params: T) -> Spec {
 	load(params.into(), include_bytes!("../../res/ethereum/poasokol.json"))
 }
 
-/// Create a new Callisto chaun spec
-pub fn new_callisto<'a, T: Into<SpecParams<'a>>>(params: T) -> Spec {
-	load(params.into(), include_bytes!("../../res/ethereum/callisto.json"))
-}
-
 // For tests
 
 /// Create a new Foundation Frontier-era chain spec as though it never changes to Homestead.
diff --git a/ethcore/src/miner/miner.rs b/ethcore/src/miner/miner.rs
index 7d6bcbe49..cb2991d5b 100644
--- a/ethcore/src/miner/miner.rs
+++ b/ethcore/src/miner/miner.rs
@@ -630,6 +630,7 @@ impl Miner {
 		}
 	}
 
+	// TODO: This is only used in authority_round path, and should be refactored to merge with the other seal() path.
 	/// Attempts to perform internal sealing (one that does not require work) and handles the result depending on the type of Seal.
 	fn seal_and_import_block_internally<C>(&self, chain: &C, block: ClosedBlock) -> bool
 		where C: BlockChain + SealedBlockImporter,
diff --git a/ethcore/src/spec/spec.rs b/ethcore/src/spec/spec.rs
index 4bd46b2bb..6e9b5b83e 100644
--- a/ethcore/src/spec/spec.rs
+++ b/ethcore/src/spec/spec.rs
@@ -35,7 +35,7 @@ use vm::{EnvInfo, CallType, ActionValue, ActionParams, ParamsType};
 
 use builtin::Builtin;
 use engines::{
-	EthEngine, NullEngine, InstantSeal, InstantSealParams, BasicAuthority,
+	EthEngine, NullEngine, InstantSeal, InstantSealParams, BasicAuthority, Clique,
 	AuthorityRound, DEFAULT_BLOCKHASH_CONTRACT
 };
 use error::Error;
@@ -91,7 +91,7 @@ pub struct CommonParams {
 	pub eip161d_transition: BlockNumber,
 	/// Number of first block where EIP-98 rules begin.
 	pub eip98_transition: BlockNumber,
-	/// Number of first block where EIP-658 rules begin.
+	/// Number of first block where EIP-658 (BYZANTIUM) rules begin.
 	pub eip658_transition: BlockNumber,
 	/// Number of first block where EIP-155 rules begin.
 	pub eip155_transition: BlockNumber,
@@ -99,9 +99,9 @@ pub struct CommonParams {
 	pub validate_receipts_transition: BlockNumber,
 	/// Validate transaction chain id.
 	pub validate_chain_id_transition: BlockNumber,
-	/// Number of first block where EIP-140 (Metropolis: REVERT opcode) rules begin.
+	/// Number of first block where EIP-140 (BYZANTIUM: REVERT opcode) rules begin.
 	pub eip140_transition: BlockNumber,
-	/// Number of first block where EIP-210 (Metropolis: BLOCKHASH changes) rules begin.
+	/// Number of first block where EIP-210 (CONSTANTINOPLE: BLOCKHASH changes) rules begin.
 	pub eip210_transition: BlockNumber,
 	/// EIP-210 Blockhash contract address.
 	pub eip210_contract_address: Address,
@@ -109,18 +109,18 @@ pub struct CommonParams {
 	pub eip210_contract_code: Bytes,
 	/// Gas allocated for EIP-210 blockhash update.
 	pub eip210_contract_gas: U256,
-	/// Number of first block where EIP-211 (Metropolis: RETURNDATASIZE/RETURNDATACOPY) rules
+	/// Number of first block where EIP-211 (BYZANTIUM: RETURNDATASIZE/RETURNDATACOPY) rules
 	/// begin.
 	pub eip211_transition: BlockNumber,
-	/// Number of first block where EIP-214 rules begin.
+	/// Number of first block where EIP-214 (BYZANTIUM) rules begin.
 	pub eip214_transition: BlockNumber,
-	/// Number of first block where EIP-145 rules begin.
+	/// Number of first block where EIP-145 (CONSTANTINOPLE) rules begin.
 	pub eip145_transition: BlockNumber,
-	/// Number of first block where EIP-1052 rules begin.
+	/// Number of first block where EIP-1052 (CONSTANTINOPLE) rules begin.
 	pub eip1052_transition: BlockNumber,
-	/// Number of first block where EIP-1283 rules begin.
+	/// Number of first block where EIP-1283 (CONSTANTINOPLE) rules begin.
 	pub eip1283_transition: BlockNumber,
-	/// Number of first block where EIP-1283 rules end.
+	/// Number of first block where EIP-1283 rules end. (CONSTANTINOPLE)
 	pub eip1283_disable_transition: BlockNumber,
 	/// Number of first block where EIP-1014 rules begin.
 	pub eip1014_transition: BlockNumber,
@@ -611,6 +611,8 @@ impl Spec {
 			ethjson::spec::Engine::InstantSeal(Some(instant_seal)) => Arc::new(InstantSeal::new(instant_seal.params.into(), machine)),
 			ethjson::spec::Engine::InstantSeal(None) => Arc::new(InstantSeal::new(InstantSealParams::default(), machine)),
 			ethjson::spec::Engine::BasicAuthority(basic_authority) => Arc::new(BasicAuthority::new(basic_authority.params.into(), machine)),
+			ethjson::spec::Engine::Clique(clique) => Clique::new(clique.params.into(), machine)
+								.expect("Failed to start Clique consensus engine."),
 			ethjson::spec::Engine::AuthorityRound(authority_round) => AuthorityRound::new(authority_round.params.into(), machine)
 				.expect("Failed to start AuthorityRound consensus engine."),
 		}
@@ -827,7 +829,6 @@ impl Spec {
 		ethjson::spec::Spec::load(reader)
 			.map_err(fmt_err)
 			.map(load_machine_from)
-
 	}
 
 	/// Loads spec from json file. Provide factories for executing contracts and ensuring
diff --git a/goerli.json b/goerli.json
new file mode 100644
index 000000000..8e8e3a67c
--- /dev/null
+++ b/goerli.json
@@ -0,0 +1,911 @@
+{
+	"name":"GÃ¶rli Testnet",
+	"dataDir":"goerli",
+	"engine":{
+		"clique":{
+			"params":{
+				"period":15,
+				"epoch":30000
+			}
+		}
+	},
+	"params":{
+		"accountStartNonce":"0x0",
+		"chainID":"0x5",
+		"eip140Transition":"0x0",
+		"eip145Transition":"0x0",
+		"eip150Transition":"0x0",
+		"eip155Transition":"0x0",
+		"eip160Transition":"0x0",
+		"eip161abcTransition":"0x0",
+		"eip161dTransition":"0x0",
+		"eip211Transition":"0x0",
+		"eip214Transition":"0x0",
+		"eip658Transition":"0x0",
+		"eip1014Transition":"0x0",
+		"eip1052Transition":"0x0",
+		"eip1283Transition":"0x0",
+		"eip1283DisableTransition":"0x0",
+		"gasLimitBoundDivisor":"0x400",
+		"maxCodeSize":"0x6000",
+		"maxCodeSizeTransition":"0x0",
+		"maximumExtraDataSize":"0xffff",
+		"minGasLimit":"0x1388",
+		"networkID":"0x5"
+	},
+	"genesis":{
+		"author":"0x0000000000000000000000000000000000000000",
+		"difficulty":"0x1",
+		"extraData":"0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
+		"gasLimit":"0xa00000",
+		"parentHash":"0x0000000000000000000000000000000000000000000000000000000000000000",
+		"seal":{
+			"ethereum":{
+				"nonce":"0x0000000000000000",
+				"mixHash":"0x0000000000000000000000000000000000000000000000000000000000000000"
+			}
+		},
+		"timestamp":"0x5c51a607"
+	},
+	"nodes":[
+		"enode://011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a@51.141.78.53:30303",
+		"enode://176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b@13.93.54.137:30303"
+	],
+	"accounts":{
+		"0x0000000000000000000000000000000000000000":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000001":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"ecrecover",
+				"pricing":{
+					"linear":{
+						"base":3000,
+						"word":0
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000002":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"sha256",
+				"pricing":{
+					"linear":{
+						"base":60,
+						"word":12
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000003":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"ripemd160",
+				"pricing":{
+					"linear":{
+						"base":600,
+						"word":120
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000004":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"identity",
+				"pricing":{
+					"linear":{
+						"base":15,
+						"word":3
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000005":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"modexp",
+				"activate_at":"0x0",
+				"pricing":{
+					"modexp":{
+						"divisor":20
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000006":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"alt_bn128_add",
+				"activate_at":"0x0",
+				"pricing":{
+					"linear":{
+						"base":500,
+						"word":0
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000007":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"alt_bn128_mul",
+				"activate_at":"0x0",
+				"pricing":{
+					"linear":{
+						"base":40000,
+						"word":0
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000008":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"alt_bn128_pairing",
+				"activate_at":"0x0",
+				"pricing":{
+					"alt_bn128_pairing":{
+						"base":100000,
+						"pair":80000
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000009":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000010":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000011":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000012":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000013":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000014":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000015":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000016":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000017":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000018":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000019":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000020":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000021":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000022":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000023":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000024":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000025":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000026":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000027":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000028":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000029":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000030":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000031":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000032":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000033":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000034":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000035":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000036":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000037":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000038":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000039":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000040":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000041":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000042":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000043":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000044":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000045":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000046":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000047":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000048":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000049":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000050":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000051":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000052":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000053":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000054":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000055":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000056":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000057":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000058":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000059":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000060":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000061":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000062":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000063":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000064":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000065":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000066":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000067":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000068":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000069":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000070":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000071":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000072":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000073":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000074":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000075":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000076":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000077":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000078":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000079":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000080":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000081":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000082":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000083":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000084":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000085":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000086":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000087":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000088":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000089":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000090":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000091":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000092":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000093":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000094":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000095":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000096":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000097":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000098":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000099":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009f":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000aa":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ab":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ac":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ad":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ae":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000af":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ba":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000be":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bf":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ca":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ce":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cf":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000da":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000db":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000dc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000dd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000de":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000df":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ea":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000eb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ec":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ed":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ee":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ef":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fa":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fe":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ff":{
+			"balance":"0x1"
+		},
+		"0x4c2ae482593505f0163cdefc073e81c63cda4107": {
+			"balance": "0x152d02c7e14af6800000"
+		},
+		"0xa8e8f14732658e4b51e8711931053a8a69baf2b1": {
+			"balance": "0x152d02c7e14af6800000"
+		},
+		"0xd9a5179f091d85051d3c982785efd1455cec8699": {
+			"balance": "0x84595161401484a000000"
+		},
+		"0xe0a2bd4258d2768837baa26a28fe71dc079f84c7": {
+			"balance": "0x4a47e3c12448f4ad000000"
+		}
+	}
+}
diff --git a/json/src/spec/clique.rs b/json/src/spec/clique.rs
new file mode 100644
index 000000000..87f032ada
--- /dev/null
+++ b/json/src/spec/clique.rs
@@ -0,0 +1,54 @@
+// Copyright 2015-2019 Parity Technologies (UK) Ltd.
+// This file is part of Parity Ethereum.
+
+// Parity Ethereum is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+
+// Parity Ethereum is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License
+// along with Parity Ethereum.  If not, see <http://www.gnu.org/licenses/>.
+
+//! Clique params deserialization.
+
+use uint::Uint;
+
+/// Clique params deserialization.
+#[derive(Debug, PartialEq, Deserialize)]
+pub struct CliqueParams {
+	pub period: Option<Uint>,
+	pub epoch: Option<Uint>
+}
+
+/// Clique engine deserialization.
+#[derive(Debug, PartialEq, Deserialize)]
+pub struct Clique {
+	pub params: CliqueParams,
+}
+
+#[cfg(test)]
+mod tests {
+	use serde_json;
+	use uint::Uint;
+	use ethereum_types::U256;
+	use super::*;
+
+	#[test]
+	fn clique_deserialization() {
+		let s = r#"{
+			"params": {
+				"period": 5,
+				"epoch": 30000
+			}
+		}"#;
+
+		let deserialized: Clique = serde_json::from_str(s).unwrap();
+		assert_eq!(deserialized.params.period, Some(Uint(U256::from(5))));
+		assert_eq!(deserialized.params.epoch, Some(Uint(U256::from(30000))));
+	}
+}
diff --git a/json/src/spec/engine.rs b/json/src/spec/engine.rs
index 8941f89e1..702bae0b5 100644
--- a/json/src/spec/engine.rs
+++ b/json/src/spec/engine.rs
@@ -16,7 +16,7 @@
 
 //! Engine deserialization.
 
-use super::{Ethash, BasicAuthority, AuthorityRound, NullEngine, InstantSeal};
+use super::{Ethash, BasicAuthority, AuthorityRound, NullEngine, InstantSeal, Clique};
 
 /// Engine deserialization.
 #[derive(Debug, PartialEq, Deserialize)]
@@ -34,6 +34,8 @@ pub enum Engine {
 	BasicAuthority(BasicAuthority),
 	/// AuthorityRound engine.
 	AuthorityRound(AuthorityRound),
+	/// Clique engine.
+	Clique(Clique)
 }
 
 #[cfg(test)]
@@ -130,5 +132,19 @@ mod tests {
 			Engine::AuthorityRound(_) => {}, // AuthorityRound is unit tested in its own file.
 			_ => panic!(),
 		};
+
+		let s = r#"{
+			"clique": {
+				"params": {
+					"peorid" : 15,
+					"epoch": 30000
+				}
+			}
+		}"#;
+		let deserialized: Engine = serde_json::from_str(s).unwrap();
+		match deserialized {
+			Engine::Clique(_) => {}, // AuthorityRound is unit tested in its own file.
+			_ => panic!(),
+		};
 	}
 }
diff --git a/json/src/spec/mod.rs b/json/src/spec/mod.rs
index 1d6815d37..f1145be2e 100644
--- a/json/src/spec/mod.rs
+++ b/json/src/spec/mod.rs
@@ -31,6 +31,7 @@ pub mod authority_round;
 pub mod null_engine;
 pub mod instant_seal;
 pub mod hardcoded_sync;
+pub mod clique;
 
 pub use self::account::Account;
 pub use self::builtin::{Builtin, Pricing, Linear};
@@ -44,6 +45,7 @@ pub use self::ethash::{Ethash, EthashParams, BlockReward};
 pub use self::validator_set::ValidatorSet;
 pub use self::basic_authority::{BasicAuthority, BasicAuthorityParams};
 pub use self::authority_round::{AuthorityRound, AuthorityRoundParams};
+pub use self::clique::{Clique, CliqueParams};
 pub use self::null_engine::{NullEngine, NullEngineParams};
 pub use self::instant_seal::{InstantSeal, InstantSealParams};
 pub use self::hardcoded_sync::HardcodedSync;
diff --git a/kotti.json b/kotti.json
new file mode 100644
index 000000000..4d83451a0
--- /dev/null
+++ b/kotti.json
@@ -0,0 +1,855 @@
+{
+	"name":"Kotti Testnet",
+	"dataDir":"kotti",
+	"engine":{
+		"clique":{
+			"params":{
+				"period":15,
+				"epoch":30000
+			}
+		}
+	},
+	"params":{
+		"accountStartNonce":"0x0",
+		"chainID":"0x6",
+		"eip150Transition":"0x0",
+		"eip155Transition":"0x0",
+		"eip160Transition":"0x0",
+		"eip161abcTransition":"0x7fffffffffffffff",
+		"eip161dTransition":"0x7fffffffffffffff",
+		"gasLimitBoundDivisor":"0x400",
+		"maximumExtraDataSize":"0xffff",
+		"minGasLimit":"0x1388",
+		"networkID":"0x6"
+	},
+	"genesis":{
+		"author":"0x0000000000000000000000000000000000000000",
+		"difficulty":"0x1",
+		"extraData":"0x000000000000000000000000000000000000000000000000000000000000000025b7955e43adf9c2a01a9475908702cce67f302a6aaf8cba3c9255a2b863415d4db7bae4f4bbca020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
+		"gasLimit":"0xa00000",
+		"parentHash":"0x0000000000000000000000000000000000000000000000000000000000000000",
+		"seal":{
+			"ethereum":{
+				"nonce":"0x0000000000000000",
+				"mixHash":"0x0000000000000000000000000000000000000000000000000000000000000000"
+			}
+		},
+		"timestamp":"0x5c2d2287"
+	},
+	"nodes":[
+		"enode://06333009fc9ef3c9e174768e495722a7f98fe7afd4660542e983005f85e556028410fd03278944f44cfe5437b1750b5e6bd1738f700fe7da3626d52010d2954c@51.141.15.254:30303",
+		"enode://ae8658da8d255d1992c3ec6e62e11d6e1c5899aa1566504bc1ff96a0c9c8bd44838372be643342553817f5cc7d78f1c83a8093dee13d77b3b0a583c050c81940@18.232.185.151:30303"
+	],
+	"accounts":{
+		"0x0000000000000000000000000000000000000000":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000001":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"ecrecover",
+				"pricing":{
+					"linear":{
+						"base":3000,
+						"word":0
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000002":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"sha256",
+				"pricing":{
+					"linear":{
+						"base":60,
+						"word":12
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000003":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"ripemd160",
+				"pricing":{
+					"linear":{
+						"base":600,
+						"word":120
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000004":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"identity",
+				"pricing":{
+					"linear":{
+						"base":15,
+						"word":3
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000005":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000006":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000007":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000008":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000009":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000010":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000011":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000012":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000013":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000014":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000015":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000016":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000017":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000018":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000019":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000020":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000021":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000022":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000023":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000024":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000025":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000026":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000027":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000028":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000029":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000030":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000031":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000032":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000033":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000034":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000035":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000036":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000037":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000038":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000039":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000040":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000041":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000042":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000043":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000044":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000045":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000046":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000047":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000048":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000049":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000050":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000051":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000052":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000053":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000054":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000055":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000056":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000057":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000058":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000059":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000060":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000061":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000062":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000063":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000064":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000065":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000066":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000067":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000068":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000069":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000070":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000071":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000072":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000073":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000074":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000075":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000076":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000077":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000078":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000079":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000080":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000081":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000082":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000083":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000084":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000085":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000086":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000087":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000088":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000089":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000090":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000091":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000092":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000093":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000094":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000095":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000096":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000097":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000098":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000099":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009f":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000aa":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ab":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ac":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ad":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ae":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000af":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ba":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000be":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bf":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ca":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ce":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cf":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000da":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000db":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000dc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000dd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000de":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000df":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ea":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000eb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ec":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ed":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ee":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ef":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fa":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fe":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ff":{
+			"balance":"0x1"
+		},
+		"0x25b7955e43adf9c2a01a9475908702cce67f302a":{
+			"balance":"0x84595161401484a000000"
+		},
+		"0x6aaf8cba3c9255a2b863415d4db7bae4f4bbca02":{
+			"balance":"0x4a723dc6b40b8a9a000000"
+		}
+	}
+}
diff --git a/parity/cli/mod.rs b/parity/cli/mod.rs
index c372e9bff..01f4469bb 100644
--- a/parity/cli/mod.rs
+++ b/parity/cli/mod.rs
@@ -300,7 +300,7 @@ usage! {
 
 			ARG arg_chain: (String) = "foundation", or |c: &Config| c.parity.as_ref()?.chain.clone(),
 			"--chain=[CHAIN]",
-			"Specify the blockchain type. CHAIN may be either a JSON chain specification file or ethereum, classic, poacore, tobalaba, expanse, musicoin, ellaism, easthub, social, mix, callisto, morden, ropsten, kovan, poasokol, testnet, or dev.",
+			"Specify the blockchain type. CHAIN may be either a JSON chain specification file or ethereum, classic, poacore, tobalaba, expanse, musicoin, ellaism, easthub, social, mix, callisto, morden, ropsten, kovan, rinkeby, goerli, kotti, poasokol, testnet, or dev.",
 
 			ARG arg_keys_path: (String) = "$BASE/keys", or |c: &Config| c.parity.as_ref()?.keys_path.clone(),
 			"--keys-path=[PATH]",
@@ -926,7 +926,7 @@ usage! {
 			"--whisper",
 			"Enable the Whisper network.",
 
- 			ARG arg_whisper_pool_size: (usize) = 10usize, or |c: &Config| c.whisper.as_ref()?.pool_size.clone(),
+			ARG arg_whisper_pool_size: (usize) = 10usize, or |c: &Config| c.whisper.as_ref()?.pool_size.clone(),
 			"--whisper-pool-size=[MB]",
 			"Target size of the whisper message pool in megabytes.",
 
diff --git a/parity/params.rs b/parity/params.rs
index a916d05a7..389b708ce 100644
--- a/parity/params.rs
+++ b/parity/params.rs
@@ -47,6 +47,9 @@ pub enum SpecType {
 	Morden,
 	Ropsten,
 	Kovan,
+	Rinkeby,
+	Goerli,
+	Kotti,
 	Sokol,
 	Dev,
 	Custom(String),
@@ -77,6 +80,9 @@ impl str::FromStr for SpecType {
 			"morden" | "classic-testnet" => SpecType::Morden,
 			"ropsten" => SpecType::Ropsten,
 			"kovan" | "testnet" => SpecType::Kovan,
+			"rinkeby" => SpecType::Rinkeby,
+			"goerli" | "gÃ¶rli" => SpecType::Goerli,
+			"kotti" => SpecType::Kotti,
 			"sokol" | "poasokol" => SpecType::Sokol,
 			"dev" => SpecType::Dev,
 			other => SpecType::Custom(other.into()),
@@ -102,6 +108,9 @@ impl fmt::Display for SpecType {
 			SpecType::Morden => "morden",
 			SpecType::Ropsten => "ropsten",
 			SpecType::Kovan => "kovan",
+			SpecType::Rinkeby => "rinkeby",
+			SpecType::Goerli => "goerli",
+			SpecType::Kotti => "kotti",
 			SpecType::Sokol => "sokol",
 			SpecType::Dev => "dev",
 			SpecType::Custom(ref custom) => custom,
@@ -127,6 +136,9 @@ impl SpecType {
 			SpecType::Morden => Ok(ethereum::new_morden(params)),
 			SpecType::Ropsten => Ok(ethereum::new_ropsten(params)),
 			SpecType::Kovan => Ok(ethereum::new_kovan(params)),
+			SpecType::Rinkeby => Ok(ethereum::new_rinkeby(params)),
+			SpecType::Goerli => Ok(ethereum::new_goerli(params)),
+			SpecType::Kotti => Ok(ethereum::new_kotti(params)),
 			SpecType::Sokol => Ok(ethereum::new_sokol(params)),
 			SpecType::Dev => Ok(Spec::new_instant()),
 			SpecType::Custom(ref filename) => {
@@ -385,6 +397,10 @@ mod tests {
 		assert_eq!(SpecType::Ropsten, "ropsten".parse().unwrap());
 		assert_eq!(SpecType::Kovan, "kovan".parse().unwrap());
 		assert_eq!(SpecType::Kovan, "testnet".parse().unwrap());
+		assert_eq!(SpecType::Rinkeby, "rinkeby".parse().unwrap());
+		assert_eq!(SpecType::Goerli, "goerli".parse().unwrap());
+		assert_eq!(SpecType::Goerli, "gÃ¶rli".parse().unwrap());
+		assert_eq!(SpecType::Kotti, "kotti".parse().unwrap());
 		assert_eq!(SpecType::Sokol, "sokol".parse().unwrap());
 		assert_eq!(SpecType::Sokol, "poasokol".parse().unwrap());
 	}
@@ -410,6 +426,9 @@ mod tests {
 		assert_eq!(format!("{}", SpecType::Morden), "morden");
 		assert_eq!(format!("{}", SpecType::Ropsten), "ropsten");
 		assert_eq!(format!("{}", SpecType::Kovan), "kovan");
+		assert_eq!(format!("{}", SpecType::Rinkeby), "rinkeby");
+		assert_eq!(format!("{}", SpecType::Goerli), "goerli");
+		assert_eq!(format!("{}", SpecType::Kotti), "kotti");
 		assert_eq!(format!("{}", SpecType::Sokol), "sokol");
 		assert_eq!(format!("{}", SpecType::Dev), "dev");
 		assert_eq!(format!("{}", SpecType::Custom("foo/bar".into())), "foo/bar");
diff --git a/rinkeby.json b/rinkeby.json
new file mode 100644
index 000000000..20534785f
--- /dev/null
+++ b/rinkeby.json
@@ -0,0 +1,902 @@
+{
+	"name":"Rinkeby",
+	"dataDir":"rinkeby",
+	"engine":{
+		"clique":{
+			"params":{
+				"period":15,
+				"epoch":30000
+			}
+		}
+	},
+	"params":{
+		"accountStartNonce":"0x0",
+		"chainID":"0x4",
+		"eip140Transition":"0xfcc25",
+		"eip145Transition":"0x37db77",
+		"eip150Transition":"0x2",
+		"eip155Transition":"0x3",
+		"eip160Transition":"0x0",
+		"eip161abcTransition":"0x0",
+		"eip161dTransition":"0x0",
+		"eip211Transition":"0xfcc25",
+		"eip214Transition":"0xfcc25",
+		"eip658Transition":"0xfcc25",
+		"eip1014Transition":"0x37db77",
+		"eip1052Transition":"0x37db77",
+		"eip1283Transition":"0x37db77",
+		"gasLimitBoundDivisor":"0x400",
+		"maxCodeSize":"0x6000",
+		"maxCodeSizeTransition":"0x0",
+		"maximumExtraDataSize":"0xffff",
+		"minGasLimit":"0x1388",
+		"networkID":"0x4"
+	},
+	"genesis":{
+		"author":"0x0000000000000000000000000000000000000000",
+		"difficulty":"0x1",
+		"extraData":"0x52657370656374206d7920617574686f7269746168207e452e436172746d616e42eb768f2244c8811c63729a21a3569731535f067ffc57839b00206d1ad20c69a1981b489f772031b279182d99e65703f0076e4812653aab85fca0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
+		"gasLimit":"0x47b760",
+		"parentHash":"0x0000000000000000000000000000000000000000000000000000000000000000",
+		"seal":{
+			"ethereum":{
+				"nonce":"0x0000000000000000",
+				"mixHash":"0x0000000000000000000000000000000000000000000000000000000000000000"
+			}
+		},
+		"timestamp":"0x58ee40ba"
+	},
+	"nodes":[
+		"enode://a24ac7c5484ef4ed0c5eb2d36620ba4e4aa13b8c84684e1b4aab0cebea2ae45cb4d375b77eab56516d34bfbd3c1a833fc51296ff084b770b94fb9028c4d25ccf@52.169.42.101:30303",
+		"enode://343149e4feefa15d882d9fe4ac7d88f885bd05ebb735e547f12e12080a9fa07c8014ca6fd7f373123488102fe5e34111f8509cf0b7de3f5b44339c9f25e87cb8@52.3.158.184:30303",
+		"enode://b6b28890b006743680c52e64e0d16db57f28124885595fa03a562be1d2bf0f3a1da297d56b13da25fb992888fd556d4c1a27b1f39d531bde7de1921c90061cc6@159.89.28.211:30303"
+	],
+	"accounts":{
+		"0x0000000000000000000000000000000000000000":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000001":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"ecrecover",
+				"pricing":{
+					"linear":{
+						"base":3000,
+						"word":0
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000002":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"sha256",
+				"pricing":{
+					"linear":{
+						"base":60,
+						"word":12
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000003":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"ripemd160",
+				"pricing":{
+					"linear":{
+						"base":600,
+						"word":120
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000004":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"identity",
+				"pricing":{
+					"linear":{
+						"base":15,
+						"word":3
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000005":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"modexp",
+				"activate_at":"0xfcc25",
+				"pricing":{
+					"modexp":{
+						"divisor":20
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000006":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"alt_bn128_add",
+				"activate_at":"0xfcc25",
+				"pricing":{
+					"linear":{
+						"base":500,
+						"word":0
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000007":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"alt_bn128_mul",
+				"activate_at":"0xfcc25",
+				"pricing":{
+					"linear":{
+						"base":40000,
+						"word":0
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000008":{
+			"balance":"0x1",
+			"builtin":{
+				"name":"alt_bn128_pairing",
+				"activate_at":"0xfcc25",
+				"pricing":{
+					"alt_bn128_pairing":{
+						"base":100000,
+						"pair":80000
+					}
+				}
+			}
+		},
+		"0x0000000000000000000000000000000000000009":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000000f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000010":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000011":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000012":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000013":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000014":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000015":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000016":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000017":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000018":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000019":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000001f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000020":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000021":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000022":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000023":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000024":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000025":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000026":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000027":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000028":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000029":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000002f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000030":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000031":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000032":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000033":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000034":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000035":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000036":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000037":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000038":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000039":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000003f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000040":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000041":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000042":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000043":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000044":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000045":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000046":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000047":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000048":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000049":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000004f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000050":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000051":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000052":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000053":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000054":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000055":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000056":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000057":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000058":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000059":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000005f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000060":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000061":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000062":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000063":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000064":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000065":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000066":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000067":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000068":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000069":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000006f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000070":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000071":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000072":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000073":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000074":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000075":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000076":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000077":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000078":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000079":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000007f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000080":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000081":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000082":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000083":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000084":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000085":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000086":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000087":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000088":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000089":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000008f":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000090":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000091":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000092":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000093":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000094":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000095":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000096":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000097":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000098":{
+			"balance":"0x1"
+		},
+		"0x0000000000000000000000000000000000000099":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009a":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009b":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009c":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009d":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009e":{
+			"balance":"0x1"
+		},
+		"0x000000000000000000000000000000000000009f":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000a9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000aa":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ab":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ac":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ad":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ae":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000af":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000b9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ba":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000be":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000bf":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000c9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ca":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ce":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000cf":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000d9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000da":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000db":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000dc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000dd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000de":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000df":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000e9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ea":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000eb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ec":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ed":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ee":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ef":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f0":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f1":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f2":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f3":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f4":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f5":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f6":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f7":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f8":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000f9":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fa":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fb":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fc":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fd":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000fe":{
+			"balance":"0x1"
+		},
+		"0x00000000000000000000000000000000000000ff":{
+			"balance":"0x1"
+		},
+		"0x31b98d14007bdee637298086988a0bbd31184523":{
+			"balance":"0x200000000000000000000000000000000000000000000000000000000000000"
+		}
+	}
+}
diff --git a/scripts/gitlab/sign-win.cmd b/scripts/gitlab/sign-win.cmd
old mode 100755
new mode 100644
diff --git a/util/version/Cargo.toml b/util/version/Cargo.toml
index b5c608be3..7a697a573 100644
--- a/util/version/Cargo.toml
+++ b/util/version/Cargo.toml
@@ -3,8 +3,8 @@
 [package]
 name = "parity-version"
 # NOTE: this value is used for Parity Ethereum version string (via env CARGO_PKG_VERSION)
-version = "2.4.0"
-authors = ["Parity Technologies <admin@parity.io>"]
+version = "2.4.0-clique"
+authors = ["Parity Technologies <admin@parity.io>", "Yucong Sun"]
 build = "build.rs"
 
 [package.metadata]
@@ -19,6 +19,7 @@ track = "beta"
 foundation = { forkBlock = 7280000, critical = false }
 ropsten = { forkBlock = 4939394, critical = false }
 kovan = { forkBlock = 10255201, critical = false }
+goerli = { forkBlock = 0, critical = false }
 
 [dependencies]
 parity-bytes = "0.1"
